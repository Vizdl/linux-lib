[state: 06-01-2010]

BATMAN-ADV
----------

Batman-advanced is a new approach to wireless networking which does no longer
operate on the IP basis. Unlike B.A.T.M.A.N, which exchanges information
using UDP packets and sets routing tables, batman-advanced operates on ISO/OSI
Layer 2 only and uses and routes (or better: bridges) Ethernet Frames. It
emulates a virtual network switch of all nodes participating. Therefore all
nodes appear to be link local, thus all higher operating protocols won't be
affected by any changes within the network. You can run almost any protocol
above B.A.T.M.A.N. Advanced, prominent examples are: IPv4, IPv6, DHCP, IPX.

This is batman-advanced implemented as Linux kernel driver. It does not depend
on any network (other) driver, and can be used on wifi as well as ethernet,
vpn, etc ... (anything with ethernet-style layer 2).

USAGE
-----

insmod the batman-adv.ko in your kernel:

# insmod batman-adv.ko

the module is now waiting for activation. You must add some interfaces
on which batman can operate. Each interface must be added separately:

# echo wlan0 > /proc/net/batman-adv/interfaces

( # echo wlan1 > /proc/net/batman-adv/interfaces )
( # echo eth0 > /proc/net/batman-adv/interfaces )
( ... )

Now batman starts broadcasting on this interface.
You can now view the table of originators (mesh participants) with:

# cat /proc/net/batman-adv/originators

The module will create a new interface "bat0", which can be used as a
regular interface:

# ifconfig bat0 inet 192.168.0.1 up
# ping 192.168.0.2
...

If you want topology visualization, your meshnode must be configured
as VIS-server:

# echo "server" > /proc/net/batman-adv/vis

Each node is either configured as "server" or as "client" (default:
"client"). Clients send their topology data to the server next to them,
and server synchronize with other servers. If there is no server
configured (default) within the mesh, no topology information will be
transmitted. With these "synchronizing servers", there can be 1 or
more vis servers sharing the same (or at least very similar) data.

When configured as server, you can get a topology snapshot of your mesh:

# cat /proc/net/batman-adv/vis

The output is in a generic raw format. Use the batctl tool (See below)
to convert this to other formats more suitable for graphing, eg
graphviz dot, or JSON data-interchange format.

In very mobile scenarios, you might want to adjust the originator
interval to a lower value. This will make the mesh more responsive to
topology changes, but will also increase the overhead. Please make sure
that all nodes in your mesh use the same interval. The default value
is 1000 ms (1 second).

# echo 1000 > /proc/net/batman-adv/orig_interval

To deactivate batman, do:

# echo "" > /proc/net/batman-adv/interfaces

LOGGING/DEBUGGING
-----------------

All error messages, warnings and information messages are sent to the
kernel log. Depending on your operating system distribution this can be
read in one of a number of ways. Try using the commands: dmesg,
logread, or looking in the files /var/log/kern.log or
/var/log/syslog. All batman-adv messages are prefixed with
"batman-adv:" So to see just these messages try

dmesg | grep batman-adv

When investigating problems with your mesh network it is sometimes
necessary to see more detail debug messages. This must be enabled when
compiling the batman-adv module. Use "make menuconfig" and enable the
option "B.A.T.M.A.N. debugging".

The additional debug output is by default disabled. It can be enabled
either at kernel module load time or during run time. To enable debug
output at module load time, add the module parameter debug=<value>.
<value> can take one of four values.

0 - All debug output disabled
1 - Enable messages related to routing / flooding / broadcasting
2 - Enable route or hna added / changed / deleted
3 - Enable all messages

e.g.

modprobe batman-adv debug=2

will load the module and enable debug messages for when routes or HNAs
change.

The debug output can also be changed at runtime using the file
/sys/module/batman-adv/parameters/debug. e.g.

echo 2 > /sys/module/batman-adv/parameters/debug

enables debug messages for when routes or HNAs

The debug output is sent to the kernel logs. So try dmesg, logread etc
to see the debug messages.

BATCTL
------

B.A.T.M.A.N.  advanced operates on layer 2 and thus all hosts
participating in the virtual switch are completely transparent for all
protocols above layer 2. Therefore the common diagnosis tools do not
work as expected. To overcome these problems batctl was created. At
the moment the batctl contains ping, traceroute, tcpdump and
interfaces to the kernel module settings.

For more information, please see the manpage (man batctl).

batctl is available on http://www.open-mesh.net/

CONTACT
-------

Please send us comments, experiences, questions, anything :)

IRC:             #batman on irc.freenode.org
Mailing-list:    b.a.t.m.a.n@open-mesh.net
(subscription at https://list.open-mesh.net/mm/listinfo/b.a.t.m.a.n )

You can also contact the Authors:

Marek Lindner <lindner_marek@yahoo.de>
Simon Wunderlich <siwu@hrz.tu-chemnitz.de>
