# vi: set sw=4 ts=4:

=head1 NAME

BusyBox - The Swiss Army Knife of Embedded Linux

=head1 SYNTAX

 busybox <applet> [arguments...]  # or

 <applet> [arguments...]	  # if symlinked

=head1 DESCRIPTION

BusyBox combines tiny versions of many common UNIX utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in GNU coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured GNU cousins; however, the
options that are included provide the expected functionality and behave very
much like their GNU counterparts.

BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete POSIX environment for any small or embedded
system.

BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
'make' to compile BusyBox using your configuration.

After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by CONFIG_PREFIX. CONFIG_PREFIX can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by CONFIG_PREFIX.

=head1 USAGE

BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.

You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering

	/bin/busybox ls

will also cause BusyBox to behave as 'ls'.

Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.

For example, entering

	ln -s /bin/busybox ls
	./ls

will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.

If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.

=head1 COMMON OPTIONS

Most BusyBox applets support the B<--help> argument to provide a terse runtime
description of their behavior.  If the CONFIG_FEATURE_VERBOSE_USAGE option has
been enabled, more detailed usage information will also be available.

=head1 COMMANDS

Currently available applets include:

	[, [[, acpid, add-shell, addgroup, adduser, adjtimex, arch, arp,
	arping, ash, awk, base64, basename, bc, beep, blkdiscard, blkid,
	blockdev, bootchartd, brctl, bunzip2, bzcat, bzip2, cal, cat, chat,
	chattr, chgrp, chmod, chown, chpasswd, chpst, chroot, chrt, chvt,
	cksum, clear, cmp, comm, conspy, cp, cpio, crond, crontab, cryptpw,
	cttyhack, cut, date, dc, dd, deallocvt, delgroup, deluser, depmod,
	devmem, df, dhcprelay, diff, dirname, dmesg, dnsd, dnsdomainname,
	dos2unix, dpkg, dpkg-deb, du, dumpkmap, dumpleases, echo, ed, egrep,
	eject, env, envdir, envuidgid, ether-wake, expand, expr, factor,
	fakeidentd, fallocate, false, fatattr, fbset, fbsplash, fdflush,
	fdformat, fdisk, fgconsole, fgrep, find, findfs, fixup, flock, fold,
	free, freeramdisk, fsck, fsck.minix, fsfreeze, fstrim, fsync, ftpd,
	ftpget, ftpput, fuser, getopt, getty, grep, groups, gunzip, gzip,
	halt, hd, hdparm, head, hexdump, hexedit, hostid, hostname, httpd,
	hush, hwclock, i2cdetect, i2cdump, i2cget, i2cset, id, ifconfig,
	ifdown, ifenslave, ifplugd, ifup, inetd, init, insmod, install,
	ionice, iostat, ip, ipaddr, ipcalc, ipcrm, ipcs, iplink, ipneigh,
	iproute, iprule, iptunnel, kbd_mode, kill, killall, killall5, klogd,
	last, less, link, linux32, linux64, linuxrc, ln, loadfont, loadkmap,
	logger, login, logname, logread, losetup, lpd, lpq, lpr, ls, lsattr,
	lsmod, lsof, lspci, lsscsi, lsusb, lzcat, lzma, lzop, makedevs,
	makemime, man, md5sum, mdev, mesg, microcom, mkdir, mkdosfs, mke2fs,
	mkfifo, mkfs.ext2, mkfs.minix, mkfs.vfat, mknod, mkpasswd, mkswap,
	mktemp, modinfo, modprobe, more, mount, mountpoint, mpstat, mt, mv,
	nameif, nanddump, nandwrite, nbd-client, nc, netstat, nice, nl,
	nmeter, nohup, nologin, nproc, nsenter, nslookup, ntpd, nuke, od,
	openvt, partprobe, passwd, paste, patch, pgrep, pidof, ping, ping6,
	pipe_progress, pivot_root, pkill, pmap, popmaildir, poweroff,
	powertop, printenv, printf, ps, pscan, pstree, pwd, pwdx,
	raidautorun, rdate, rdev, readahead, readlink, readprofile,
	realpath, reboot, reformime, remove-shell, renice, reset, resize,
	resume, rev, rm, rmdir, rmmod, route, rpm, rpm2cpio, rtcwake,
	run-init, run-parts, runlevel, runsv, runsvdir, rx, script,
	scriptreplay, sed, sendmail, seq, setarch, setconsole, setfattr,
	setfont, setkeycodes, setlogcons, setpriv, setserial, setsid,
	setuidgid, sh, sha1sum, sha256sum, sha3sum, sha512sum, showkey,
	shred, shuf, slattach, sleep, smemcap, softlimit, sort, split,
	ssl_client, start-stop-daemon, stat, strings, stty, su, sulogin,
	sum, sv, svc, svlogd, svok, swapoff, swapon, switch_root, sync,
	sysctl, syslogd, tac, tail, tar, taskset, tc, tcpsvd, tee, telnet,
	telnetd, test, tftp, tftpd, time, timeout, top, touch, tr,
	traceroute, traceroute6, true, truncate, tty, ttysize, tunctl,
	ubiattach, ubidetach, ubimkvol, ubirename, ubirmvol, ubirsvol,
	ubiupdatevol, udhcpc, udhcpd, udpsvd, uevent, umount, uname,
	unexpand, uniq, unix2dos, unlink, unlzma, unshare, unxz, unzip,
	uptime, users, usleep, uudecode, uuencode, vconfig, vi, vlock,
	volname, w, wall, watch, watchdog, wc, wget, which, who, whoami,
	whois, xargs, xxd, xz, xzcat, yes, zcat, zcip

=head1 COMMAND DESCRIPTIONS

=over 4

=item B<acpid>

acpid [-df] [-c CONFDIR] [-l LOGFILE] [-a ACTIONFILE] [-M MAPFILE] [-e PROC_EVENT_FILE] [-p PIDFILE]

Listen to ACPI events and spawn specific helpers on event arrival

	-d	Log to stderr, not log file (implies -f)
	-f	Run in foreground
	-c DIR	Config directory [/etc/acpi]
	-e FILE	/proc event file [/proc/acpi/event]
	-l FILE	Log file [/var/log/acpid.log]
	-p FILE	Pid file [/var/run/acpid.pid]
	-a FILE	Action file [/etc/acpid.conf]
	-M FILE Map file [/etc/acpi.map]

Accept and ignore compatibility options -g -m -s -S -v

=item B<add-shell>

add-shell SHELL...

Add SHELLs to /etc/shells

=item B<addgroup>

addgroup [-g GID] [-S] [USER] GROUP

Add a group or add a user to a group

	-g GID	Group id
	-S	Create a system group

=item B<adduser>

adduser [OPTIONS] USER [GROUP]

Create new user, or add USER to GROUP

	-h DIR		Home directory
	-g GECOS	GECOS field
	-s SHELL	Login shell
	-G GRP		Group
	-S		Create a system user
	-D		Don't assign a password
	-H		Don't create home directory
	-u UID		User id
	-k SKEL		Skeleton directory (/etc/skel)

=item B<adjtimex>

adjtimex [-q] [-o OFF] [-f FREQ] [-p TCONST] [-t TICK]

Read or set kernel time variables. See adjtimex(2)

	-q	Quiet
	-o OFF	Time offset, microseconds
	-f FREQ	Frequency adjust, integer kernel units (65536 is 1ppm)
	-t TICK	Microseconds per tick, usually 10000
		(positive -t or -f values make clock run faster)
	-p TCONST

=item B<arch>

arch 

Print system architecture

=item B<arp>

arp 
[-vn]	[-H HWTYPE] [-i IF] -a [HOSTNAME]
[-v]		    [-i IF] -d HOSTNAME [pub]
[-v]	[-H HWTYPE] [-i IF] -s HOSTNAME HWADDR [temp]
[-v]	[-H HWTYPE] [-i IF] -s HOSTNAME HWADDR [netmask MASK] pub
[-v]	[-H HWTYPE] [-i IF] -Ds HOSTNAME IFACE [netmask MASK] pub

Manipulate ARP cache

	-a		Display (all) hosts
	-d		Delete ARP entry
	-s		Set new entry
	-v		Verbose
	-n		Don't resolve names
	-i IF		Network interface
	-D		Read HWADDR from IFACE
	-A,-p AF	Protocol family
	-H HWTYPE	Hardware address type

=item B<arping>

arping [-fqbDUA] [-c CNT] [-w TIMEOUT] [-I IFACE] [-s SRC_IP] DST_IP

Send ARP requests/replies

	-f		Quit on first ARP reply
	-q		Quiet
	-b		Keep broadcasting, don't go unicast
	-D		Exit with 1 if DST_IP replies
	-U		Unsolicited ARP mode, update your neighbors
	-A		ARP answer mode, update your neighbors
	-c N		Stop after sending N ARP requests
	-w TIMEOUT	Seconds to wait for ARP reply
	-I IFACE	Interface to use (default eth0)
	-s SRC_IP	Sender IP address
	DST_IP		Target IP address

=item B<ash>

ash [-/+OPTIONS] [-/+o OPT]... [-c 'SCRIPT' [ARG0 [ARGS]] / FILE [ARGS] / -s [ARGS]]

Unix shell interpreter

=item B<awk>

awk [OPTIONS] [AWK_PROGRAM] [FILE]...

	-v VAR=VAL	Set variable
	-F SEP		Use SEP as field separator
	-f FILE		Read program from FILE
	-e AWK_PROGRAM

=item B<base64>

base64 [-d] [FILE]

Base64 encode or decode FILE to standard output
	-d	Decode data

=item B<basename>

basename FILE [SUFFIX]

Strip directory path and .SUFFIX from FILE

=item B<bc>

bc [-sqlw] FILE...

Arbitrary precision calculator

	-q	Quiet
	-l	Load standard math library
	-s	Be POSIX compatible
	-w	Warn if extensions are used

$BC_LINE_LENGTH changes output width

=item B<beep>

beep -f FREQ -l LEN -d DELAY -r COUNT -n

	-f	Frequency in Hz
	-l	Length in ms
	-d	Delay in ms
	-r	Repetitions
	-n	Start new tone

=item B<blkdiscard>

blkdiscard [-o OFS] [-l LEN] [-s] DEVICE

Discard sectors on DEVICE

	-o OFS	Byte offset into device
	-l LEN	Number of bytes to discard
	-s	Perform a secure discard

=item B<blkid>

blkid [BLOCKDEV]...

Print UUIDs of all filesystems

=item B<blockdev>

blockdev OPTION BLOCKDEV

	--setro		Set ro
	--setrw		Set rw
	--getro		Get ro
	--getss		Get sector size
	--getbsz	Get block size
	--setbsz BYTES	Set block size
	--getsz		Get device size in 512-byte sectors
	--getsize64	Get device size in bytes
	--flushbufs	Flush buffers
	--rereadpt	Reread partition table

=item B<bootchartd>

bootchartd start [PROG ARGS]|stop|init

Create /var/log/bootchart.tgz with boot chart data

start: start background logging; with PROG, run PROG, then kill logging with USR1
stop: send USR1 to all bootchartd processes
init: start background logging; stop when getty/xdm is seen (for init scripts)
Under PID 1: as init, then exec $bootchart_init, /init, /sbin/init

=item B<brctl>

brctl COMMAND [BRIDGE [INTERFACE]]

Manage ethernet bridges

Commands:

	show			Show a list of bridges
	addbr BRIDGE		Create BRIDGE
	delbr BRIDGE		Delete BRIDGE
	addif BRIDGE IFACE	Add IFACE to BRIDGE
	delif BRIDGE IFACE	Delete IFACE from BRIDGE
	setageing BRIDGE TIME		Set ageing time
	setfd BRIDGE TIME		Set bridge forward delay
	sethello BRIDGE TIME		Set hello time
	setmaxage BRIDGE TIME		Set max message age
	setpathcost BRIDGE COST		Set path cost
	setportprio BRIDGE PRIO		Set port priority
	setbridgeprio BRIDGE PRIO	Set bridge priority
	stp BRIDGE [1/yes/on|0/no/off]	STP on/off

=item B<bunzip2>

bunzip2 [-cfk] [FILE]...

Decompress FILEs (or stdin)

	-c	Write to stdout
	-f	Force
	-k	Keep input files

=item B<bzcat>

bzcat [FILE]...

Decompress to stdout

=item B<bzip2>

bzip2 [OPTIONS] [FILE]...

Compress FILEs (or stdin) with bzip2 algorithm

	-1..9	Compression level
	-d	Decompress
	-t	Test file integrity
	-c	Write to stdout
	-f	Force
	-k	Keep input files

=item B<cal>

cal [-jy] [[MONTH] YEAR]

Display a calendar

	-j	Use julian dates
	-y	Display the entire year

=item B<cat>

cat [-nbvteA] [FILE]...

Print FILEs to stdout

	-n	Number output lines
	-b	Number nonempty lines
	-v	Show nonprinting characters as ^x or M-x
	-t	...and tabs as ^I
	-e	...and end lines with $
	-A	Same as -vte

=item B<chat>

chat EXPECT [SEND [EXPECT [SEND...]]]

Useful for interacting with a modem connected to stdin/stdout.
A script consists of "expect-send" argument pairs.
Example:

chat '' ATZ OK ATD123456 CONNECT '' ogin: pppuser word: ppppass '~'

=item B<chattr>

chattr [-R] [-v VERSION] [-+=AacDdijsStTu] FILE...

Change ext2 file attributes

	-R	Recurse
	-v VER	Set version/generation number
Modifiers:

	-,+,=	Remove/add/set attributes
Attributes:

	A	Don't track atime
	a	Append mode only
	c	Enable compress
	D	Write dir contents synchronously
	d	Don't backup with dump
	i	Cannot be modified (immutable)
	j	Write all data to journal first
	s	Zero disk storage when deleted
	S	Write synchronously
	t	Disable tail-merging of partial blocks with other files
	u	Allow file to be undeleted

=item B<chgrp>

chgrp [-RhLHPcvf]... GROUP FILE...

Change the group membership of each FILE to GROUP

	-R	Recurse
	-h	Affect symlinks instead of symlink targets
	-L	Traverse all symlinks to directories
	-H	Traverse symlinks on command line only
	-P	Don't traverse symlinks (default)
	-c	List changed files
	-v	Verbose
	-f	Hide errors

=item B<chmod>

chmod [-Rcvf] MODE[,MODE]... FILE...

Each MODE is one or more of the letters ugoa, one of the
symbols +-= and one or more of the letters rwxst

	-R	Recurse
	-c	List changed files
	-v	List all files
	-f	Hide errors

=item B<chown>

chown [-RhLHPcvf]... USER[:[GRP]] FILE...

Change the owner and/or group of each FILE to USER and/or GRP

	-R	Recurse
	-h	Affect symlinks instead of symlink targets
	-L	Traverse all symlinks to directories
	-H	Traverse symlinks on command line only
	-P	Don't traverse symlinks (default)
	-c	List changed files
	-v	List all files
	-f	Hide errors

=item B<chpasswd>

chpasswd [--md5|--encrypted|--crypt-method|--root]

Read user:password from stdin and update /etc/passwd

	-e,--encrypted		Supplied passwords are in encrypted form
	-m,--md5		Encrypt using md5, not des
	-c,--crypt-method ALG	des,md5,sha256/512 (default des)
	-R,--root DIR		Directory to chroot into

=item B<chpst>

chpst [-vP012] [-u USER[:GRP]] [-U USER[:GRP]] [-e DIR]
	[-/ DIR] [-n NICE] [-m BYTES] [-d BYTES] [-o N]
	[-p N] [-f BYTES] [-c BYTES] PROG ARGS

Change the process state, run PROG

	-u USER[:GRP]	Set uid and gid
	-U USER[:GRP]	Set $UID and $GID in environment
	-e DIR		Set environment variables as specified by files
			in DIR: file=1st_line_of_file
	-/ DIR		Chroot to DIR
	-n NICE		Add NICE to nice value
	-m BYTES	Same as -d BYTES -s BYTES -l BYTES
	-d BYTES	Limit data segment
	-o N		Limit number of open files per process
	-p N		Limit number of processes per uid
	-f BYTES	Limit output file sizes
	-c BYTES	Limit core file size
	-v		Verbose
	-P		Create new process group
	-0		Close stdin
	-1		Close stdout
	-2		Close stderr

=item B<chroot>

chroot NEWROOT [PROG ARGS]

Run PROG with root directory set to NEWROOT

=item B<chrt>

chrt [-prfombi] [PRIO] [PID | PROG ARGS]

Change scheduling priority and class for a process

	-p	Operate on PID
	-r	Set SCHED_RR class
	-f	Set SCHED_FIFO class
	-o	Set SCHED_OTHER class
	-b	Set SCHED_BATCH class
	-i	Set SCHED_IDLE class
	-m	Show min/max priorities

=item B<chvt>

chvt N

Change the foreground virtual terminal to /dev/ttyN

=item B<cksum>

cksum FILE...

Calculate the CRC32 checksums of FILEs

=item B<clear>

clear 

Clear screen

=item B<cmp>

cmp [-l] [-s] FILE1 [FILE2 [SKIP1 [SKIP2]]]

Compare FILE1 with FILE2 (or stdin)

	-l	Write the byte numbers (decimal) and values (octal)
		for all differing bytes
	-s	Quiet

=item B<comm>

comm [-123] FILE1 FILE2

Compare FILE1 with FILE2

	-1	Suppress lines unique to FILE1
	-2	Suppress lines unique to FILE2
	-3	Suppress lines common to both files

=item B<conspy>

conspy [-vcsndfFQ] [-x COL] [-y LINE] [CONSOLE_NO]

A text-mode VNC like program for Linux virtual consoles.
To exit, quickly press ESC 3 times.

	-v	Don't send keystrokes to the console
	-c	Create missing /dev/{tty,vcsa}N
	-s	Open a SHELL session
	-n	Black & white
	-d	Dump console to stdout
	-f	Follow cursor
	-F	Assume console is on a framebuffer device
	-Q	Disable exit on ESC-ESC-ESC
	-x COL	Starting column
	-y LINE	Starting line

=item B<cp>

cp [OPTIONS] SOURCE... DEST

Copy SOURCE(s) to DEST

	-a	Same as -dpR
	-R,-r	Recurse
	-d,-P	Preserve symlinks (default if -R)
	-L	Follow all symlinks
	-H	Follow symlinks on command line
	-p	Preserve file attributes if possible
	-f	Overwrite
	-i	Prompt before overwrite
	-l,-s	Create (sym)links
	-T	Treat DEST as a normal file
	-u	Copy only newer files

=item B<cpio>

cpio [-dmvu] [-F FILE] [-R USER[:GRP]] [-H newc] [-tio] [-p DIR] [EXTR_FILE]...

Extract (-i) or list (-t) files from a cpio archive, or
take file list from stdin and create an archive (-o) or copy files (-p)

Main operation mode:

	-t	List
	-i	Extract EXTR_FILEs (or all)
	-o	Create (requires -H newc)
	-p DIR	Copy files to DIR
Options:

	-H newc	Archive format
	-d	Make leading directories
	-m	Preserve mtime
	-v	Verbose
	-u	Overwrite
	-F FILE	Input (-t,-i,-p) or output (-o) file
	-R USER[:GRP]	Set owner of created files
	-L	Dereference symlinks
	-0	Input is separated by NULs

=item B<crond>

crond -fbS -l N -d N -L LOGFILE -c DIR

	-f	Foreground
	-b	Background (default)
	-S	Log to syslog (default)
	-l N	Set log level. Most verbose 0, default 8
	-d N	Set log level, log to stderr
	-L FILE	Log to FILE
	-c DIR	Cron dir. Default:/var/spool/cron/crontabs

=item B<crontab>

crontab [-c DIR] [-u USER] [-ler]|[FILE]

	-c	Crontab directory
	-u	User
	-l	List crontab
	-e	Edit crontab
	-r	Delete crontab
	FILE	Replace crontab by FILE ('-': stdin)

=item B<cryptpw>

cryptpw [OPTIONS] [PASSWORD] [SALT]

Print crypt(3) hashed PASSWORD

	-P,--password-fd N	Read password from fd N
	-m,--method TYPE	des,md5,sha256/512 (default des)
	-S,--salt SALT

=item B<cttyhack>

cttyhack [PROG ARGS]

Give PROG a controlling tty if possible.
Example for /etc/inittab (for busybox init):
	::respawn:/bin/cttyhack /bin/sh
Giving controlling tty to shell running with PID 1:
	$ exec cttyhack sh
Starting interactive shell from boot shell script:

	setsid cttyhack sh

=item B<cut>

cut [OPTIONS] [FILE]...

Print selected fields from each input FILE to stdout

	-b LIST	Output only bytes from LIST
	-c LIST	Output only characters from LIST
	-d CHAR	Use CHAR instead of tab as the field delimiter
	-s	Output only the lines containing delimiter
	-f N	Print only these fields
	-n	Ignored

=item B<date>

date [OPTIONS] [+FMT] [TIME]

Display time (using +FMT), or set time

	[-s,--set] TIME	Set time to TIME
	-u,--utc	Work in UTC (don't convert to local time)
	-R,--rfc-2822	Output RFC-2822 compliant date string
	-I[SPEC]	Output ISO-8601 compliant date string
			SPEC='date' (default) for date only,
			'hours', 'minutes', or 'seconds' for date and
			time to the indicated precision
	-r,--reference FILE	Display last modification time of FILE
	-d,--date TIME	Display TIME, not 'now'
	-D FMT		Use FMT for -d TIME conversion

Recognized TIME formats:

	hh:mm[:ss]
	[YYYY.]MM.DD-hh:mm[:ss]
	YYYY-MM-DD hh:mm[:ss]
	[[[[[YY]YY]MM]DD]hh]mm[.ss]
	'date TIME' form accepts MMDDhhmm[[YY]YY][.ss] instead

=item B<dc>

dc [-x] [-eSCRIPT]... [-fFILE]... [FILE]...

Tiny RPN calculator. Operations:
+, -, *, /, %, ~, ^, |,
p - print top of the stack without popping
f - print entire stack
k - pop the value and set the precision
i - pop the value and set input radix
o - pop the value and set output radix
Examples: dc -e'2 2 + p' -> 4, dc -e'8 8 * 2 2 + / p' -> 16

=item B<dd>

dd [if=FILE] [of=FILE] [ibs=N obs=N/bs=N] [count=N] [skip=N] [seek=N]
	[conv=notrunc|noerror|sync|fsync]
	[iflag=skip_bytes|fullblock] [oflag=seek_bytes]

Copy a file with converting and formatting

	if=FILE		Read from FILE instead of stdin
	of=FILE		Write to FILE instead of stdout
	bs=N		Read and write N bytes at a time
	ibs=N		Read N bytes at a time
	obs=N		Write N bytes at a time
	count=N		Copy only N input blocks
	skip=N		Skip N input blocks
	seek=N		Skip N output blocks
	conv=notrunc	Don't truncate output file
	conv=noerror	Continue after read errors
	conv=sync	Pad blocks with zeros
	conv=fsync	Physically write data out before finishing
	conv=swab	Swap every pair of bytes
	iflag=skip_bytes	skip=N is in bytes
	iflag=fullblock	Read full blocks
	oflag=seek_bytes	seek=N is in bytes
	status=noxfer	Suppress rate output
	status=none	Suppress all output

N may be suffixed by c (1), w (2), b (512), kB (1000), k (1024), MB, M, GB, G

=item B<deallocvt>

deallocvt [N]

Deallocate unused virtual terminal /dev/ttyN

=item B<delgroup>

delgroup [USER] GROUP

Delete group GROUP from the system or user USER from group GROUP

=item B<deluser>

deluser [--remove-home] USER

Delete USER from the system

=item B<depmod>

depmod [-n]

Generate modules.dep.bb

	-n	Dry run: print file to stdout

=item B<devmem>

devmem ADDRESS [WIDTH [VALUE]]

Read/write from physical address

	ADDRESS	Address to act upon
	WIDTH	Width (8/16/...)
	VALUE	Data to be written

=item B<df>

df [-PkmhTai] [-B SIZE] [FILESYSTEM]...

Print filesystem usage statistics

	-P	POSIX output format
	-k	1024-byte blocks (default)
	-m	1M-byte blocks
	-h	Human readable (e.g. 1K 243M 2G)
	-T	Print filesystem type
	-a	Show all filesystems
	-i	Inodes
	-B SIZE	Blocksize

=item B<dhcprelay>

dhcprelay CLIENT_IFACE[,CLIENT_IFACE2]... SERVER_IFACE [SERVER_IP]

Relay DHCP requests between clients and server

=item B<diff>

diff [-abBdiNqrTstw] [-L LABEL] [-S FILE] [-U LINES] FILE1 FILE2

Compare files line by line and output the differences between them.
This implementation supports unified diffs only.

	-a	Treat all files as text
	-b	Ignore changes in the amount of whitespace
	-B	Ignore changes whose lines are all blank
	-d	Try hard to find a smaller set of changes
	-i	Ignore case differences
	-L	Use LABEL instead of the filename in the unified header
	-N	Treat absent files as empty
	-q	Output only whether files differ
	-r	Recurse
	-S	Start with FILE when comparing directories
	-T	Make tabs line up by prefixing a tab when necessary
	-s	Report when two files are the same
	-t	Expand tabs to spaces in output
	-U	Output LINES lines of context
	-w	Ignore all whitespace

=item B<dirname>

dirname FILENAME

Strip non-directory suffix from FILENAME

=item B<dmesg>

dmesg [-c] [-n LEVEL] [-s SIZE]

Print or control the kernel ring buffer

	-c		Clear ring buffer after printing
	-n LEVEL	Set console logging level
	-s SIZE		Buffer size
	-r		Print raw message buffer

=item B<dnsd>

dnsd [-dvs] [-c CONFFILE] [-t TTL_SEC] [-p PORT] [-i ADDR]

Small static DNS server daemon

	-c FILE	Config file
	-t SEC	TTL
	-p PORT	Listen on PORT
	-i ADDR	Listen on ADDR
	-d	Daemonize
	-v	Verbose
	-s	Send successful replies only. Use this if you want
		to use /etc/resolv.conf with two nameserver lines:
			nameserver DNSD_SERVER
			nameserver NORMAL_DNS_SERVER

=item B<dos2unix>

dos2unix [-ud] [FILE]

Convert FILE in-place from DOS to Unix format.
When no file is given, use stdin/stdout.

	-u	dos2unix
	-d	unix2dos

=item B<dpkg>

dpkg [-ilCPru] [-F OPT] PACKAGE

Install, remove and manage Debian packages

	-i,--install	Install the package
	-l,--list	List of installed packages
	--configure	Configure an unpackaged package
	-P,--purge	Purge all files of a package
	-r,--remove	Remove all but the configuration files for a package
	--unpack	Unpack a package, but don't configure it
	--force-depends	Ignore dependency problems
	--force-confnew	Overwrite existing config files when installing
	--force-confold	Keep old config files when installing

=item B<dpkg-deb>

dpkg-deb [-cefxX] FILE [DIR]

Perform actions on Debian packages (.deb)

	-c	List files
	-f	Print control fields
	-e	Extract control files to DIR (default: ./DEBIAN)
	-x	Extract files to DIR (no default)
	-X	Verbose -x

=item B<du>

du [-aHLdclsxhmk] [FILE]...

Summarize disk space used for each FILE and/or directory

	-a	Show file sizes too
	-L	Follow all symlinks
	-H	Follow symlinks on command line
	-d N	Limit output to directories (and files with -a) of depth < N
	-c	Show grand total
	-l	Count sizes many times if hard linked
	-s	Display only a total for each argument
	-x	Skip directories on different filesystems
	-h	Sizes in human readable format (e.g., 1K 243M 2G)
	-m	Sizes in megabytes
	-k	Sizes in kilobytes (default)

=item B<dumpkmap>

dumpkmap > keymap

Print a binary keyboard translation table to stdout

=item B<dumpleases>

dumpleases [-r|-a] [-d] [-f LEASEFILE]

Display DHCP leases granted by udhcpd

	-f,--file FILE	Lease file
	-r,--remaining	Show remaining time
	-a,--absolute	Show expiration time
	-d,--decimal	Show time in seconds

=item B<echo>

echo [-neE] [ARG]...

Print the specified ARGs to stdout

	-n	Suppress trailing newline
	-e	Interpret backslash escapes (i.e., \t=tab)
	-E	Don't interpret backslash escapes (default)

=item B<ed>

ed [FILE]

=item B<eject>

eject [-t] [-T] [DEVICE]

Eject DEVICE or default /dev/cdrom

	-s	SCSI device
	-t	Close tray
	-T	Open/close tray (toggle)

=item B<env>

env [-iu] [-] [name=value]... [PROG ARGS]

Print the current environment or run PROG after setting up
the specified environment

	-, -i	Start with an empty environment
	-u	Remove variable from the environment

=item B<envdir>

envdir DIR PROG ARGS

Set various environment variables as specified by files
in the directory DIR, run PROG

=item B<envuidgid>

envuidgid USER PROG ARGS

Set $UID to USER's uid and $GID to USER's gid, run PROG

=item B<ether-wake>

ether-wake [-b] [-i IFACE] [-p aa:bb:cc:dd[:ee:ff]/a.b.c.d] MAC

Send a magic packet to wake up sleeping machines.
MAC must be a station address (00:11:22:33:44:55) or
a hostname with a known 'ethers' entry.

	-b		Broadcast the packet
	-i IFACE	Interface to use (default eth0)
	-p PASSWORD	Append four or six byte PASSWORD to the packet

=item B<expand>

expand [-i] [-t N] [FILE]...

Convert tabs to spaces, writing to stdout

	-i	Don't convert tabs after non blanks
	-t	Tabstops every N chars

=item B<expr>

expr EXPRESSION

Print the value of EXPRESSION to stdout

EXPRESSION may be:

	ARG1 | ARG2	ARG1 if it is neither null nor 0, otherwise ARG2
	ARG1 & ARG2	ARG1 if neither argument is null or 0, otherwise 0
	ARG1 < ARG2	1 if ARG1 is less than ARG2, else 0. Similarly:
	ARG1 <= ARG2
	ARG1 = ARG2
	ARG1 != ARG2
	ARG1 >= ARG2
	ARG1 > ARG2
	ARG1 + ARG2	Sum of ARG1 and ARG2. Similarly:
	ARG1 - ARG2
	ARG1 * ARG2
	ARG1 / ARG2
	ARG1 % ARG2
	STRING : REGEXP		Anchored pattern match of REGEXP in STRING
	match STRING REGEXP	Same as STRING : REGEXP
	substr STRING POS LENGTH Substring of STRING, POS counted from 1
	index STRING CHARS	Index in STRING where any CHARS is found, or 0
	length STRING		Length of STRING
	quote TOKEN		Interpret TOKEN as a string, even if
				it is a keyword like 'match' or an
				operator like '/'
	(EXPRESSION)		Value of EXPRESSION

Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\( and \) or null; if \( and \) are not used, they return the number
of characters matched or 0.

=item B<factor>

factor [NUMBER]...

Print prime factors

=item B<fakeidentd>

fakeidentd [-fiw] [-b ADDR] [STRING]

Provide fake ident (auth) service

	-f	Run in foreground
	-i	Inetd mode
	-w	Inetd 'wait' mode
	-b ADDR	Bind to specified address
	STRING	Ident answer string (default: nobody)

=item B<fallocate>

fallocate [-o OFS] -l LEN FILE

Preallocate space for FILE

	-o OFS	Offset of range
	-l LEN	Length of range

=item B<fatattr>

fatattr [-+rhsvda] FILE...

Change file attributes on FAT filesystem

	-	Clear attributes
	+	Set attributes
	r	Read only
	h	Hidden
	s	System
	v	Volume label
	d	Directory
	a	Archive

=item B<fbset>

fbset [OPTIONS] [MODE]

Show and modify frame buffer settings

=item B<fbsplash>

fbsplash -s IMGFILE [-c] [-d DEV] [-i INIFILE] [-f CMD]

	-s	Image
	-c	Hide cursor
	-d	Framebuffer device (default /dev/fb0)
	-i	Config file (var=value):
			BAR_LEFT,BAR_TOP,BAR_WIDTH,BAR_HEIGHT
			BAR_R,BAR_G,BAR_B,IMG_LEFT,IMG_TOP
	-f	Control pipe (else exit after drawing image)
			commands: 'NN' (% for progress bar) or 'exit'

=item B<fdflush>

fdflush DEVICE

Force floppy disk drive to detect disk change

=item B<fdformat>

fdformat [-n] DEVICE

Format floppy disk

	-n	Don't verify after format

=item B<fdisk>

fdisk [-ul] [-C CYLINDERS] [-H HEADS] [-S SECTORS] [-b SSZ] DISK

Change partition table

	-u		Start and End are in sectors (instead of cylinders)
	-l		Show partition table for each DISK, then exit
	-b 2048		(for certain MO disks) use 2048-byte sectors
	-C CYLINDERS	Set number of cylinders/heads/sectors
	-H HEADS	Typically 255
	-S SECTORS	Typically 63

=item B<fgconsole>

fgconsole 

Get active console

=item B<find>

find [-HL] [PATH]... [OPTIONS] [ACTIONS]

Search for files and perform actions on them.
First failed action stops processing of current file.
Defaults: PATH is current directory, action is '-print'

	-L,-follow	Follow symlinks
	-H		...on command line only
	-xdev		Don't descend directories on other filesystems
	-maxdepth N	Descend at most N levels. -maxdepth 0 applies
			actions to command line arguments only
	-mindepth N	Don't act on first N levels
	-depth		Act on directory *after* traversing it

Actions:

	( ACTIONS )	Group actions for -o / -a
	! ACT		Invert ACT's success/failure
	ACT1 [-a] ACT2	If ACT1 fails, stop, else do ACT2
	ACT1 -o ACT2	If ACT1 succeeds, stop, else do ACT2
			Note: -a has higher priority than -o
	-name PATTERN	Match file name (w/o directory name) to PATTERN
	-iname PATTERN	Case insensitive -name
	-path PATTERN	Match path to PATTERN
	-ipath PATTERN	Case insensitive -path
	-regex PATTERN	Match path to regex PATTERN
	-type X		File type is X (one of: f,d,l,b,c,s,p)
	-executable	File is executable
	-perm MASK	At least one mask bit (+MASK), all bits (-MASK),
			or exactly MASK bits are set in file's mode
	-mtime DAYS	mtime is greater than (+N), less than (-N),
			or exactly N days in the past
	-mmin MINS	mtime is greater than (+N), less than (-N),
			or exactly N minutes in the past
	-newer FILE	mtime is more recent than FILE's
	-inum N		File has inode number N
	-user NAME/ID	File is owned by given user
	-group NAME/ID	File is owned by given group
	-size N[bck]	File size is N (c:bytes,k:kbytes,b:512 bytes(def.))
			+/-N: file size is bigger/smaller than N
	-links N	Number of links is greater than (+N), less than (-N),
			or exactly N
	-prune		If current file is directory, don't descend into it
If none of the following actions is specified, -print is assumed
	-print		Print file name
	-print0		Print file name, NUL terminated
	-exec CMD ARG ;	Run CMD with all instances of {} replaced by
			file name. Fails if CMD exits with nonzero
	-exec CMD ARG + Run CMD with {} replaced by list of file names
	-delete		Delete current file/directory. Turns on -depth option
	-quit		Exit

=item B<findfs>

findfs LABEL=label or UUID=uuid

Find a filesystem device based on a label or UUID

=item B<fixup>

fixup [-t] [-T] [DEVICE]

Eject DEVICE or default /dev/cdrom

	-t	Close tray
	-T	Open/close tray (toggle)

=item B<flock>

flock [-sxun] FD|{FILE [-c] PROG ARGS}

[Un]lock file descriptor, or lock FILE, run PROG

	-s	Shared lock
	-x	Exclusive lock (default)
	-u	Unlock FD
	-n	Fail rather than wait

=item B<fold>

fold [-bs] [-w WIDTH] [FILE]...

Wrap input lines in each FILE (or stdin), writing to stdout

	-b	Count bytes rather than columns
	-s	Break at spaces
	-w	Use WIDTH columns instead of 80

=item B<free>

free [-b/k/m/g]

Display the amount of free and used system memory

=item B<freeramdisk>

freeramdisk DEVICE

Free all memory used by the specified ramdisk

=item B<fsck>

fsck [-ANPRTV] [-t FSTYPE] [FS_OPTS] [BLOCKDEV]...

Check and repair filesystems

	-A	Walk /etc/fstab and check all filesystems
	-N	Don't execute, just show what would be done
	-P	With -A, check filesystems in parallel
	-R	With -A, skip the root filesystem
	-T	Don't show title on startup
	-V	Verbose
	-t TYPE	List of filesystem types to check

=item B<fsck.minix>

fsck.minix [-larvsmf] BLOCKDEV

Check MINIX filesystem

	-l	List all filenames
	-r	Perform interactive repairs
	-a	Perform automatic repairs
	-v	Verbose
	-s	Output superblock information
	-m	Show "mode not cleared" warnings
	-f	Force file system check

=item B<fsfreeze>

fsfreeze --[un]freeze MOUNTPOINT

Flush and halt writes to MOUNTPOINT

=item B<fstrim>

fstrim [OPTIONS] MOUNTPOINT

	-o,--offset OFFSET	Offset in bytes to discard from
	-l,--length LEN		Bytes to discard
	-m,--minimum MIN	Minimum extent length
	-v,--verbose		Print number of discarded bytes

=item B<fsync>

fsync [-d] FILE...

Write files' buffered blocks to disk

	-d	Avoid syncing metadata

=item B<ftpd>

ftpd [-wvS] [-a USER] [-t N] [-T N] [DIR]

FTP server. Chroots to DIR, if this fails (run by non-root), cds to it.
Should be used as inetd service, inetd.conf line:
	21 stream tcp nowait root ftpd ftpd /files/to/serve
Can be run from tcpsvd:

	tcpsvd -vE 0.0.0.0 21 ftpd /files/to/serve

	-w	Allow upload
	-A	No login required, client access occurs under ftpd's UID
	-a USER	Enable 'anonymous' login and map it to USER
	-v	Log errors to stderr. -vv: verbose log
	-S	Log errors to syslog. -SS: verbose log
	-t,-T N	Idle and absolute timeout

=item B<ftpget>

ftpget [OPTIONS] HOST [LOCAL_FILE] REMOTE_FILE

Download a file via FTP

	-c	Continue previous transfer
	-v	Verbose
	-u USER	Username
	-p PASS	Password
	-P NUM	Port

=item B<ftpput>

ftpput [OPTIONS] HOST [REMOTE_FILE] LOCAL_FILE

Upload a file to a FTP server

	-v	Verbose
	-u USER	Username
	-p PASS	Password
	-P NUM	Port number

=item B<fuser>

fuser [OPTIONS] FILE or PORT/PROTO

Find processes which use FILEs or PORTs

	-m	Find processes which use same fs as FILEs
	-4,-6	Search only IPv4/IPv6 space
	-s	Don't display PIDs
	-k	Kill found processes
	-SIGNAL	Signal to send (default: KILL)

=item B<getopt>

getopt [OPTIONS] [--] OPTSTRING PARAMS

	-a		Allow long options starting with single -
	-l LOPT[,...]	Long options to recognize
	-n PROGNAME	The name under which errors are reported
	-o OPTSTRING	Short options to recognize
	-q		No error messages on unrecognized options
	-Q		No normal output
	-s SHELL	Set shell quoting conventions
	-T		Version test (exits with 4)
	-u		Don't quote output

Example:


O=`getopt -l bb: -- ab:c:: "$@"` || exit 1
eval set -- "$O"
while true; do
	case "$1" in
	-a)	echo A; shift;;
	-b|--bb) echo "B:'$2'"; shift 2;;
	-c)	case "$2" in
		"")	echo C; shift 2;;
		*)	echo "C:'$2'"; shift 2;;
		esac;;
	--)	shift; break;;
	*)	echo Error; exit 1;;
	esac
done

=item B<getty>

getty [OPTIONS] BAUD_RATE[,BAUD_RATE]... TTY [TERMTYPE]

Open TTY, prompt for login name, then invoke /bin/login

	-h		Enable hardware RTS/CTS flow control
	-L		Set CLOCAL (ignore Carrier Detect state)
	-m		Get baud rate from modem's CONNECT status message
	-n		Don't prompt for login name
	-w		Wait for CR or LF before sending /etc/issue
	-i		Don't display /etc/issue
	-f ISSUE_FILE	Display ISSUE_FILE instead of /etc/issue
	-l LOGIN	Invoke LOGIN instead of /bin/login
	-t SEC		Terminate after SEC if no login name is read
	-I INITSTR	Send INITSTR before anything else
	-H HOST		Log HOST into the utmp file as the hostname

BAUD_RATE of 0 leaves it unchanged

=item B<grep>

grep [-HhnlLoqvsriwFE] [-m N] [-A/B/C N] PATTERN/-e PATTERN.../-f FILE [FILE]...

Search for PATTERN in FILEs (or stdin)

	-H	Add 'filename:' prefix
	-h	Do not add 'filename:' prefix
	-n	Add 'line_no:' prefix
	-l	Show only names of files that match
	-L	Show only names of files that don't match
	-c	Show only count of matching lines
	-o	Show only the matching part of line
	-q	Quiet. Return 0 if PATTERN is found, 1 otherwise
	-v	Select non-matching lines
	-s	Suppress open and read errors
	-r	Recurse
	-i	Ignore case
	-w	Match whole words only
	-x	Match whole lines only
	-F	PATTERN is a literal (not regexp)
	-E	PATTERN is an extended regexp
	-m N	Match up to N times per file
	-A N	Print N lines of trailing context
	-B N	Print N lines of leading context
	-C N	Same as '-A N -B N'
	-e PTRN	Pattern to match
	-f FILE	Read pattern from file

=item B<groups>

groups [USER]

Print the group memberships of USER or for the current process

=item B<gunzip>

gunzip [-cfkt] [FILE]...

Decompress FILEs (or stdin)

	-c	Write to stdout
	-f	Force
	-k	Keep input files
	-t	Test file integrity

=item B<gzip>

gzip [-cfkdt] [FILE]...

Compress FILEs (or stdin)

	-d	Decompress
	-t	Test file integrity
	-c	Write to stdout
	-f	Force
	-k	Keep input files

=item B<halt>

halt [-d DELAY] [-n] [-f] [-w]

Halt the system

	-d SEC	Delay interval
	-n	Do not sync
	-f	Force (don't go through init)
	-w	Only write a wtmp record

=item B<hd>

hd FILE...

hd is an alias for hexdump -C

=item B<hdparm>

hdparm [OPTIONS] [DEVICE]

	-a	Get/set fs readahead
	-A	Set drive read-lookahead flag (0/1)
	-b	Get/set bus state (0 == off, 1 == on, 2 == tristate)
	-B	Set Advanced Power Management setting (1-255)
	-c	Get/set IDE 32-bit IO setting
	-C	Check IDE power mode status
	-d	Get/set using_dma flag
	-D	Enable/disable drive defect-mgmt
	-f	Flush buffer cache for device on exit
	-g	Display drive geometry
	-h	Display terse usage information
	-i	Display drive identification
	-I	Detailed/current information directly from drive
	-k	Get/set keep_settings_over_reset flag (0/1)
	-K	Set drive keep_features_over_reset flag (0/1)
	-L	Set drive doorlock (0/1) (removable harddisks only)
	-m	Get/set multiple sector count
	-n	Get/set ignore-write-errors flag (0/1)
	-p	Set PIO mode on IDE interface chipset (0,1,2,3,4,...)
	-P	Set drive prefetch count
	-Q	Get/set DMA tagged-queuing depth (if supported)
	-r	Get/set readonly flag (DANGEROUS to set)
	-R	Register an IDE interface (DANGEROUS)
	-S	Set standby (spindown) timeout
	-t	Perform device read timings
	-T	Perform cache read timings
	-u	Get/set unmaskirq flag (0/1)
	-U	Unregister an IDE interface (DANGEROUS)
	-v	Defaults; same as -mcudkrag for IDE drives
	-V	Display program version and exit immediately
	-w	Perform device reset (DANGEROUS)
	-W	Set drive write-caching flag (0/1) (DANGEROUS)
	-x	Tristate device for hotswap (0/1) (DANGEROUS)
	-X	Set IDE xfer mode (DANGEROUS)
	-y	Put IDE drive in standby mode
	-Y	Put IDE drive to sleep
	-Z	Disable Seagate auto-powersaving mode
	-z	Reread partition table

=item B<head>

head [OPTIONS] [FILE]...

Print first 10 lines of each FILE (or stdin) to stdout.
With more than one FILE, precede each with a filename header.

	-n N[kbm]	Print first N lines
	-n -N[kbm]	Print all except N last lines
	-c [-]N[kbm]	Print first N bytes
	-q		Never print headers
	-v		Always print headers

N may be suffixed by k (x1024), b (x512), or m (x1024^2).

=item B<hexdump>

hexdump [-bcCdefnosvxR] [FILE]...

Display FILEs (or stdin) in a user specified format

	-b		1-byte octal display
	-c		1-byte character display
	-d		2-byte decimal display
	-o		2-byte octal display
	-x		2-byte hex display
	-C		hex+ASCII 16 bytes per line
	-v		Show all (no dup folding)
	-e FORMAT_STR	Example: '16/1 "%02x|""\n"'
	-f FORMAT_FILE
	-n LENGTH	Show only first LENGTH bytes
	-s OFFSET	Skip OFFSET bytes
	-R		Reverse of 'hexdump -Cv'

=item B<hexedit>

hexedit FILE

Edit FILE in hexadecimal

=item B<hostid>

hostid 

Print out a unique 32-bit identifier for the machine

=item B<hostname>

hostname [OPTIONS] [HOSTNAME | -F FILE]

Get or set hostname or DNS domain name

	-s	Short
	-i	Addresses for the hostname
	-d	DNS domain name
	-f	Fully qualified domain name
	-F FILE	Use FILE's content as hostname

=item B<httpd>

httpd [-ifv[v]] [-c CONFFILE] [-p [IP:]PORT] [-u USER[:GRP]] [-r REALM] [-h HOME]
or httpd -d/-e/-m STRING

Listen for incoming HTTP requests

	-i		Inetd mode
	-f		Don't daemonize
	-v[v]		Verbose
	-p [IP:]PORT	Bind to IP:PORT (default *:80)
	-u USER[:GRP]	Set uid/gid after binding to port
	-r REALM	Authentication Realm for Basic Authentication
	-h HOME		Home directory (default .)
	-c FILE		Configuration file (default {/etc,HOME}/httpd.conf)
	-m STRING	MD5 crypt STRING
	-e STRING	HTML encode STRING
	-d STRING	URL decode STRING

=item B<hush>

hush [-enxl] [-c 'SCRIPT' [ARG0 [ARGS]] / FILE [ARGS] / -s [ARGS]]

Unix shell interpreter

=item B<hwclock>

hwclock [-r|--show] [-s|--hctosys] [-w|--systohc] [--systz] [--localtime] [-u|--utc] [-f|--rtc FILE]

Query and set hardware clock (RTC)

	-r	Show hardware clock time
	-s	Set system time from hardware clock
	-w	Set hardware clock from system time
	--systz	Set in-kernel timezone, correct system time
		if hardware clock is in local time
	-u	Assume hardware clock is kept in UTC
	--localtime	Assume hardware clock is kept in local time
	-f FILE	Use specified device (e.g. /dev/rtc2)

=item B<i2cdetect>

i2cdetect -l | -F I2CBUS | [-ya] [-q|-r] I2CBUS [FIRST LAST]

Detect I2C chips

	-l	List installed buses
	-F BUS#	List functionalities on this bus
	-y	Disable interactive mode
	-a	Force scanning of non-regular addresses
	-q	Use smbus quick write commands for probing (default)
	-r	Use smbus read byte commands for probing
	FIRST and LAST limit probing range

=item B<i2cdump>

i2cdump [-fy] [-r FIRST-LAST] BUS ADDR [MODE]

Examine I2C registers

	I2CBUS	I2C bus number
	ADDRESS	0x03-0x77
MODE is:

	b	Byte (default)
	w	Word
	W	Word on even register addresses
	i	I2C block
	s	SMBus block
	c	Consecutive byte
	Append p for SMBus PEC

	-f	Force access
	-y	Disable interactive mode
	-r	Limit the number of registers being accessed

=item B<i2cget>

i2cget [-fy] BUS CHIP-ADDRESS [DATA-ADDRESS [MODE]]

Read from I2C/SMBus chip registers

	I2CBUS	I2C bus number
	ADDRESS	0x03-0x77
MODE is:

	b	Read byte data (default)
	w	Read word data
	c	Write byte/read byte
	Append p for SMBus PEC

	-f	Force access
	-y	Disable interactive mode

=item B<i2cset>

i2cset [-fy] [-m MASK] BUS CHIP-ADDRESS DATA-ADDRESS [VALUE] ... [MODE]

Set I2C registers

	I2CBUS	I2C bus number
	ADDRESS	0x03-0x77
MODE is:

	c	Byte, no value
	b	Byte data (default)
	w	Word data
	i	I2C block data
	s	SMBus block data
	Append p for SMBus PEC

	-f	Force access
	-y	Disable interactive mode
	-r	Read back and compare the result
	-m MASK	Mask specifying which bits to write

=item B<id>

id [OPTIONS] [USER]

Print information about USER or the current user

	-u	User ID
	-g	Group ID
	-G	Supplementary group IDs
	-n	Print names instead of numbers
	-r	Print real ID instead of effective ID

=item B<ifconfig>

ifconfig [-a] interface [address]

Configure a network interface

	[add ADDRESS[/PREFIXLEN]]
	[del ADDRESS[/PREFIXLEN]]
	[[-]broadcast [ADDRESS]] [[-]pointopoint [ADDRESS]]
	[netmask ADDRESS] [dstaddr ADDRESS]
	[outfill NN] [keepalive NN]
	[hw ether|infiniband ADDRESS] [metric NN] [mtu NN]
	[[-]trailers] [[-]arp] [[-]allmulti]
	[multicast] [[-]promisc] [txqueuelen NN] [[-]dynamic]
	[mem_start NN] [io_addr NN] [irq NN]
	[up|down] ...

=item B<ifdown>

ifdown [-anmvf] [-i FILE] IFACE...

	-a	Deconfigure all interfaces
	-i FILE	Use FILE for interface definitions
	-n	Print out what would happen, but don't do it
		(note: doesn't disable mappings)
	-m	Don't run any mappings
	-v	Print out what would happen before doing it
	-f	Force deconfiguration

=item B<ifenslave>

ifenslave [-cdf] MASTER_IFACE SLAVE_IFACE...

Configure network interfaces for parallel routing

	-c	Change active slave
	-d	Remove slave interface from bonding device
	-f	Force, even if interface is not Ethernet

=item B<ifplugd>

ifplugd [OPTIONS]

Network interface plug detection daemon

	-n		Don't daemonize
	-s		Don't log to syslog
	-i IFACE	Interface
	-f/-F		Treat link detection error as link down/link up
			(otherwise exit on error)
	-a		Don't up interface at each link probe
	-M		Monitor creation/destruction of interface
			(otherwise it must exist)
	-r PROG		Script to run
	-x ARG		Extra argument for script
	-I		Don't exit on nonzero exit code from script
	-p		Don't run "up" script on startup
	-q		Don't run "down" script on exit
	-l		Always run script on startup
	-t SECS		Poll time in seconds
	-u SECS		Delay before running script after link up
	-d SECS		Delay after link down
	-m MODE		API mode (mii, priv, ethtool, wlan, iff, auto)
	-k		Kill running daemon

=item B<ifup>

ifup [-anmvf] [-i FILE] IFACE...

	-a	Configure all interfaces
	-i FILE	Use FILE instead of /etc/network/interfaces
	-n	Print out what would happen, but don't do it
		(note: doesn't disable mappings)
	-m	Don't run any mappings
	-v	Print out what would happen before doing it
	-f	Force configuration

=item B<inetd>

inetd [-fe] [-q N] [-R N] [CONFFILE]

Listen for network connections and launch programs

	-f	Run in foreground
	-e	Log to stderr
	-q N	Socket listen queue (default 128)
	-R N	Pause services after N connects/min
		(default 0 - disabled)
	Default CONFFILE is /etc/inetd.conf

=item B<init>

init 

Init is the first process started during boot. It never exits.
It (re)spawns children according to /etc/inittab.

=item B<insmod>

insmod FILE [SYMBOL=VALUE]...

Load kernel module

=item B<install>

install [-cdDsp] [-o USER] [-g GRP] [-m MODE] [-t DIR] [SOURCE]... DEST

Copy files and set attributes

	-c	Just copy (default)
	-d	Create directories
	-D	Create leading target directories
	-s	Strip symbol table
	-p	Preserve date
	-o USER	Set ownership
	-g GRP	Set group ownership
	-m MODE	Set permissions
	-t DIR	Install to DIR

=item B<ionice>

ionice [-c 1-3] [-n 0-7] [-p PID] [PROG]

Change I/O priority and class

	-c	Class. 1:realtime 2:best-effort 3:idle
	-n	Priority

=item B<iostat>

iostat [-c] [-d] [-t] [-z] [-k|-m] [ALL|BLOCKDEV...] [INTERVAL [COUNT]]

Report CPU and I/O statistics

	-c	Show CPU utilization
	-d	Show device utilization
	-t	Print current time
	-z	Omit devices with no activity
	-k	Use kb/s
	-m	Use Mb/s

=item B<ip>

ip [OPTIONS] address|route|link|tunnel|neigh|rule [ARGS]

OPTIONS := -f[amily] inet|inet6|link | -o[neline]

ip addr add|del IFADDR dev IFACE | show|flush [dev IFACE] [to PREFIX]
ip route list|flush|add|del|change|append|replace|test ROUTE
ip link set IFACE [up|down] [arp on|off] [multicast on|off]
	[promisc on|off] [mtu NUM] [name NAME] [qlen NUM] [address MAC]
	[master IFACE | nomaster]
ip tunnel add|change|del|show [NAME]
	[mode ipip|gre|sit] [remote ADDR] [local ADDR] [ttl TTL]
ip neigh show|flush [to PREFIX] [dev DEV] [nud STATE]
ip rule [list] | add|del SELECTOR ACTION

=item B<ipaddr>

ipaddr add|del IFADDR dev IFACE | show|flush [dev IFACE] [to PREFIX]

ipaddr add|change|replace|delete dev IFACE IFADDR
	IFADDR := PREFIX | ADDR peer PREFIX [broadcast ADDR|+|-]
		[anycast ADDR] [label STRING] [scope SCOPE]
	PREFIX := ADDR[/MASK]
	SCOPE := [host|link|global|NUMBER]
ipaddr show|flush [dev IFACE] [scope SCOPE] [to PREFIX] [label PATTERN]

=item B<ipcalc>

ipcalc [OPTIONS] ADDRESS[/PREFIX] [NETMASK]

Calculate and display network settings from IP address

	-b	Broadcast address
	-n	Network address
	-m	Default netmask for IP
	-p	Prefix for IP/NETMASK
	-h	Resolved host name
	-s	No error messages

=item B<ipcrm>

ipcrm [-MQS key] [-mqs id]

Upper-case options MQS remove an object by shmkey value.
Lower-case options remove an object by shmid value.

	-mM	Remove memory segment after last detach
	-qQ	Remove message queue
	-sS	Remove semaphore

=item B<ipcs>

ipcs [[-smq] -i SHMID] | [[-asmq] [-tcplu]]

	-i ID	Show specific resource
Resource specification:

	-m	Shared memory segments
	-q	Message queues
	-s	Semaphore arrays
	-a	All (default)
Output format:

	-t	Time
	-c	Creator
	-p	Pid
	-l	Limits
	-u	Summary

=item B<iplink>

iplink set IFACE [up|down] [arp on|off] [multicast on|off]
	[promisc on|off] [mtu NUM] [name NAME] [qlen NUM] [address MAC]
	[master IFACE | nomaster]
iplink add [link IFACE] IFACE [address MAC] type TYPE [ARGS]
iplink delete IFACE type TYPE [ARGS]
	TYPE ARGS := vlan VLANARGS | vrf table NUM
	VLANARGS := id VLANID [protocol 802.1q|802.1ad] [reorder_hdr on|off]
		[gvrp on|off] [mvrp on|off] [loose_binding on|off]
iplink show [IFACE]

=item B<ipneigh>

ipneigh show|flush [to PREFIX] [dev DEV] [nud STATE]

=item B<iproute>

iproute list|flush|add|del|change|append|replace|test ROUTE

iproute list|flush SELECTOR
	SELECTOR := [root PREFIX] [match PREFIX] [proto RTPROTO]
	PREFIX := default|ADDR[/MASK]
iproute get ADDR [from ADDR iif IFACE]
	[oif IFACE] [tos TOS]
iproute add|del|change|append|replace|test ROUTE
	ROUTE := NODE_SPEC [INFO_SPEC]
	NODE_SPEC := PREFIX [table TABLE_ID] [proto RTPROTO] [scope SCOPE] [metric METRIC]
	INFO_SPEC := NH OPTIONS
	NH := [via [inet|inet6] ADDR] [dev IFACE] [src ADDR] [onlink]
	OPTIONS := [mtu [lock] NUM] [advmss [lock] NUM]

=item B<iprule>

iprule [list] | add|del SELECTOR ACTION

	SELECTOR := [from PREFIX] [to PREFIX] [tos TOS] [fwmark FWMARK]
			[dev IFACE] [pref NUMBER]
	ACTION := [table TABLE_ID] [nat ADDR]
			[prohibit|reject|unreachable]
			[realms [SRCREALM/]DSTREALM]
	TABLE_ID := [local|main|default|NUMBER]

=item B<iptunnel>

iptunnel add|change|del|show [NAME]
	[mode ipip|gre|sit] [remote ADDR] [local ADDR] [ttl TTL]

iptunnel add|change|del|show [NAME]
	[mode ipip|gre|sit] [remote ADDR] [local ADDR]
	[[i|o]seq] [[i|o]key KEY] [[i|o]csum]
	[ttl TTL] [tos TOS] [[no]pmtudisc] [dev PHYS_DEV]

=item B<kbd_mode>

kbd_mode [-a|k|s|u] [-C TTY]

Report or set VT console keyboard mode

	-a	Default (ASCII)
	-k	Medium-raw (keycode)
	-s	Raw (scancode)
	-u	Unicode (utf-8)
	-C TTY	Affect TTY

=item B<kill>

kill [-l] [-SIG] PID...

Send a signal (default: TERM) to given PIDs

	-l	List all signal names and numbers

=item B<killall>

killall [-l] [-q] [-SIG] PROCESS_NAME...

Send a signal (default: TERM) to given processes

	-l	List all signal names and numbers
	-q	Don't complain if no processes were killed

=item B<killall5>

killall5 [-l] [-SIG] [-o PID]...

Send a signal (default: TERM) to all processes outside current session

	-l	List all signal names and numbers
	-o PID	Don't signal this PID

=item B<klogd>

klogd [-c N] [-n]

Log kernel messages to syslog

	-c N	Print to console messages more urgent than prio N (1-8)
	-n	Run in foreground

=item B<last>

last [-HW] [-f FILE]

Show listing of the last users that logged into the system

	-W	Display with no host column truncation
	-f FILE Read from FILE instead of /var/log/wtmp

=item B<less>

less [-EFIMmNSRh~] [FILE]...

View FILE (or stdin) one screenful at a time

	-E	Quit once the end of a file is reached
	-F	Quit if entire file fits on first screen
	-I	Ignore case in all searches
	-M,-m	Display status line with line numbers
		and percentage through the file
	-N	Prefix line number to each line
	-S	Truncate long lines
	-R	Remove color escape codes in input
	-~	Suppress ~s displayed past EOF

=item B<link>

link FILE LINK

Create hard LINK to FILE

=item B<ln>

ln [OPTIONS] TARGET... LINK|DIR

Create a link LINK or DIR/TARGET to the specified TARGET(s)

	-s	Make symlinks instead of hardlinks
	-f	Remove existing destinations
	-n	Don't dereference symlinks - treat like normal file
	-b	Make a backup of the target (if exists) before link operation
	-S suf	Use suffix instead of ~ when making backup files
	-T	2nd arg must be a DIR
	-v	Verbose

=item B<loadfont>

loadfont < font

Load a console font from stdin

=item B<loadkmap>

loadkmap < keymap

Load a binary keyboard translation table from stdin

=item B<logger>

logger [OPTIONS] [MESSAGE]

Write MESSAGE (or stdin) to syslog

	-s	Log to stderr as well as the system log
	-t TAG	Log using the specified tag (defaults to user name)
	-p PRIO	Priority (numeric or facility.level pair)

=item B<login>

login [-p] [-h HOST] [[-f] USER]

Begin a new session on the system

	-f	Don't authenticate (user already authenticated)
	-h HOST	Host user came from (for network logins)
	-p	Preserve environment

=item B<logname>

logname 

Print the name of the current user

=item B<logread>

logread [-fF]

Show messages in syslogd's circular buffer

	-f	Output data as log grows
	-F	Same as -f, but dump buffer first

=item B<losetup>

losetup [-r] [-o OFS] {-f|LOOPDEV} FILE - associate loop devices
	losetup -d LOOPDEV - disassociate
	losetup -a - show status
	losetup -f - show next free loop device

	-o OFS	Start OFS bytes into FILE
	-r	Read-only
	-f	Show/use next free loop device

=item B<lpd>

lpd SPOOLDIR [HELPER [ARGS]]

SPOOLDIR must contain (symlinks to) device nodes or directories
with names matching print queue names. In the first case, jobs are
sent directly to the device. Otherwise each job is stored in queue
directory and HELPER program is called. Name of file to print
is passed in $DATAFILE variable.
Example:

	tcpsvd -E 0 515 softlimit -m 999999 lpd /var/spool ./print

=item B<lpq>

lpq [-P queue[@host[:port]]] [-U USERNAME] [-d JOBID]... [-fs]

	-P	lp service to connect to (else uses $PRINTER)
	-d	Delete jobs
	-f	Force any waiting job to be printed
	-s	Short display

=item B<lpr>

lpr -P queue[@host[:port]] -U USERNAME -J TITLE -Vmh [FILE]...

	-P	lp service to connect to (else uses $PRINTER)
	-m	Send mail on completion
	-h	Print banner page too
	-V	Verbose

=item B<ls>

ls [-1AaCxdLHRFplinshrSXvctu] [-w WIDTH] [FILE]...

List directory contents

	-1	One column output
	-a	Include entries which start with .
	-A	Like -a, but exclude . and ..
	-x	List by lines
	-d	List directory entries instead of contents
	-L	Follow symlinks
	-H	Follow symlinks on command line
	-R	Recurse
	-p	Append / to dir entries
	-F	Append indicator (one of */=@|) to entries
	-l	Long listing format
	-i	List inode numbers
	-n	List numeric UIDs and GIDs instead of names
	-s	List allocated blocks
	-lc	List ctime
	-lu	List atime
	--full-time	List full date and time
	-h	Human readable sizes (1K 243M 2G)
	--group-directories-first
	-S	Sort by size
	-X	Sort by extension
	-v	Sort by version
	-t	Sort by mtime
	-tc	Sort by ctime
	-tu	Sort by atime
	-r	Reverse sort order
	-w N	Format N columns wide
	--color[={always,never,auto}]	Control coloring

=item B<lsattr>

lsattr [-Radlv] [FILE]...

List ext2 file attributes

	-R	Recurse
	-a	Don't hide entries starting with .
	-d	List directory entries instead of contents
	-l	List long flag names
	-v	List version/generation number

=item B<lsmod>

lsmod 

List loaded kernel modules

=item B<lsof>

lsof 

Show all open files

=item B<lspci>

lspci [-mk]

List all PCI devices

	-m	Parsable output
	-k	Show driver

=item B<lzcat>

lzcat [FILE]...

Decompress to stdout

=item B<lzma>

lzma -d [-cfk] [FILE]...

Decompress FILE (or stdin)

	-d	Decompress
	-c	Write to stdout
	-f	Force
	-k	Keep input files

=item B<lzop>

lzop [-cfUvd123456789CF] [FILE]...

	-1..9	Compression level
	-d	Decompress
	-c	Write to stdout
	-f	Force
	-U	Delete input files
	-v	Verbose
	-F	Don't store or verify checksum
	-C	Also write checksum of compressed block

=item B<makedevs>

makedevs [-d device_table] rootdir

Create a range of special files as specified in a device table.
Device table entries take the form of:

<name> <type> <mode> <uid> <gid> <major> <minor> <start> <inc> <count>
Where name is the file name, type can be one of:
	f	Regular file
	d	Directory
	c	Character device
	b	Block device
	p	Fifo (named pipe)
uid is the user id for the target file, gid is the group id for the
target file. The rest of the entries (major, minor, etc) apply to
to device special files. A '-' may be used for blank entries.

=item B<makemime>

makemime [OPTIONS] [FILE]...

Create multipart MIME-encoded message from FILEs

	-o FILE	Output. Default: stdout
	-a HDR	Add header(s). Examples:
		"From: user@host.org", "Date: `date -R`"
	-c CT	Content type. Default: application/octet-stream
	-C CS	Charset. Default: us-ascii

Other options are silently ignored

=item B<man>

man [-aw] [MANPAGE]...

Format and display manual page

	-a	Display all pages
	-w	Show page locations

$COLUMNS overrides output width

=item B<md5sum>

md5sum [-c[sw]] [FILE]...

Print or check MD5 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<mdev>

mdev [-s]

mdev -s is to be run during boot to scan /sys and populate /dev.

Bare mdev is a kernel hotplug helper. To activate it:
	echo /sbin/mdev >/proc/sys/kernel/hotplug

It uses /etc/mdev.conf with lines
	[-][ENV=regex;]...DEVNAME UID:GID PERM [>|=PATH]|[!] [@|$|*PROG]
where DEVNAME is device name regex, @major,minor[-minor2], or
environment variable regex. A common use of the latter is
to load modules for hotplugged devices:

	$MODALIAS=.* 0:0 660 @modprobe "$MODALIAS"

If /dev/mdev.seq file exists, mdev will wait for its value
to match $SEQNUM variable. This prevents plug/unplug races.
To activate this feature, create empty /dev/mdev.seq at boot.

If /dev/mdev.log file exists, debug log will be appended to it.

=item B<mesg>

mesg [y|n]

Control write access to your terminal
	y	Allow write access to your terminal
	n	Disallow write access to your terminal

=item B<microcom>

microcom [-d DELAY] [-t TIMEOUT] [-s SPEED] [-X] TTY

Copy bytes for stdin to TTY and from TTY to stdout

	-d	Wait up to DELAY ms for TTY output before sending every
		next byte to it
	-t	Exit if both stdin and TTY are silent for TIMEOUT ms
	-s	Set serial line to SPEED
	-X	Disable special meaning of NUL and Ctrl-X from stdin

=item B<mkdir>

mkdir [OPTIONS] DIRECTORY...

Create DIRECTORY

	-m MODE	Mode
	-p	No error if exists; make parent directories as needed

=item B<mkdosfs>

mkdosfs [-v] [-n LABEL] BLOCKDEV [KBYTES]

Make a FAT32 filesystem

	-v	Verbose
	-n LBL	Volume label

=item B<mke2fs>

mke2fs [-Fn] [-b BLK_SIZE] [-i INODE_RATIO] [-I INODE_SIZE] [-m RESERVED_PERCENT] [-L LABEL] BLOCKDEV [KBYTES]

	-b BLK_SIZE	Block size, bytes
	-F		Force
	-i RATIO	Max number of files is filesystem_size / RATIO
	-I BYTES	Inode size (min 128)
	-L LBL		Volume label
	-m PERCENT	Percent of blocks to reserve for admin
	-n		Dry run

=item B<mkfifo>

mkfifo [-m MODE] NAME

Create named pipe

	-m MODE	Mode (default a=rw)

=item B<mkfs.ext2>

mkfs.ext2 [-Fn] [-b BLK_SIZE] [-i INODE_RATIO] [-I INODE_SIZE] [-m RESERVED_PERCENT] [-L LABEL] BLOCKDEV [KBYTES]

	-b BLK_SIZE	Block size, bytes
	-F		Force
	-i RATIO	Max number of files is filesystem_size / RATIO
	-I BYTES	Inode size (min 128)
	-L LBL		Volume label
	-m PERCENT	Percent of blocks to reserve for admin
	-n		Dry run

=item B<mkfs.minix>

mkfs.minix [-c | -l FILE] [-nXX] [-iXX] BLOCKDEV [KBYTES]

Make a MINIX filesystem

	-c		Check device for bad blocks
	-n [14|30]	Maximum length of filenames
	-i INODES	Number of inodes for the filesystem
	-l FILE		Read bad blocks list from FILE
	-v		Make version 2 filesystem

=item B<mkfs.vfat>

mkfs.vfat [-v] [-n LABEL] BLOCKDEV [KBYTES]

Make a FAT32 filesystem

	-v	Verbose
	-n LBL	Volume label

=item B<mknod>

mknod [-m MODE] NAME TYPE [MAJOR MINOR]

Create a special file (block, character, or pipe)

	-m MODE	Creation mode (default a=rw)
TYPE:
	b	Block device
	c or u	Character device
	p	Named pipe (MAJOR MINOR must be omitted)

=item B<mkpasswd>

mkpasswd [OPTIONS] [PASSWORD] [SALT]

Print crypt(3) hashed PASSWORD

	-P,--password-fd N	Read password from fd N
	-m,--method TYPE	des,md5,sha256/512 (default des)
	-S,--salt SALT

=item B<mkswap>

mkswap [-L LBL] BLOCKDEV [KBYTES]

Prepare BLOCKDEV to be used as swap partition

	-L LBL	Label

=item B<mktemp>

mktemp [-dt] [-p DIR] [TEMPLATE]

Create a temporary file with name based on TEMPLATE and print its name.
TEMPLATE must end with XXXXXX (e.g. [/dir/]nameXXXXXX).
Without TEMPLATE, -t tmp.XXXXXX is assumed.

	-d	Make directory, not file
	-q	Fail silently on errors
	-t	Prepend base directory name to TEMPLATE
	-p DIR	Use DIR as a base directory (implies -t)
	-u	Do not create anything; print a name

Base directory is: -p DIR, else $TMPDIR, else /tmp

=item B<modinfo>

modinfo [-adlpn0] [-F keyword] MODULE

	-a		Shortcut for '-F author'
	-d		Shortcut for '-F description'
	-l		Shortcut for '-F license'
	-p		Shortcut for '-F parm'
	-F keyword	Keyword to look for
	-0		Separate output with NULs

=item B<modprobe>

modprobe [-rq] MODULE [SYMBOL=VALUE]...

	-r	Remove MODULE
	-q	Quiet

=item B<more>

more [FILE]...

View FILE (or stdin) one screenful at a time

=item B<mount>

mount [OPTIONS] [-o OPT] DEVICE NODE

Mount a filesystem. Filesystem autodetection requires /proc.

	-a		Mount all filesystems in fstab
	-f		Dry run
	-v		Verbose
	-r		Read-only mount
	-t FSTYPE[,...]	Filesystem type(s)
	-T FILE		Read FILE instead of /etc/fstab
	-O OPT		Mount only filesystems with option OPT (-a only)
-o OPT:
	loop		Ignored (loop devices are autodetected)
	[a]sync		Writes are [a]synchronous
	[no]atime	Disable/enable updates to inode access times
	[no]diratime	Disable/enable atime updates to directories
	[no]relatime	Disable/enable atime updates relative to modification time
	[no]dev		(Dis)allow use of special device files
	[no]exec	(Dis)allow use of executable files
	[no]suid	(Dis)allow set-user-id-root programs
	[r]shared	Convert [recursively] to a shared subtree
	[r]slave	Convert [recursively] to a slave subtree
	[r]private	Convert [recursively] to a private subtree
	[un]bindable	Make mount point [un]able to be bind mounted
	[r]bind		Bind a file or directory [recursively] to another location
	move		Relocate an existing mount point
	remount		Remount a mounted filesystem, changing flags
	ro		Same as -r

There are filesystem-specific -o flags.

=item B<mountpoint>

mountpoint [-q] <[-dn] DIR | -x DEVICE>

Check if the directory is a mountpoint

	-q	Quiet
	-d	Print major/minor device number of the filesystem
	-n	Print device name of the filesystem
	-x	Print major/minor device number of the blockdevice

=item B<mpstat>

mpstat [-A] [-I SUM|CPU|ALL|SCPU] [-u] [-P num|ALL] [INTERVAL [COUNT]]

Per-processor statistics

	-A			Same as -I ALL -u -P ALL
	-I SUM|CPU|ALL|SCPU	Report interrupt statistics
	-P num|ALL		Processor to monitor
	-u			Report CPU utilization

=item B<mt>

mt [-f device] opcode value

Control magnetic tape drive operation

Available Opcodes:


bsf bsfm bsr bss datacompression drvbuffer eof eom erase
fsf fsfm fsr fss load lock mkpart nop offline ras1 ras2
ras3 reset retension rewind rewoffline seek setblk setdensity
setpart tell unload unlock weof wset

=item B<mv>

mv [-fin] SOURCE DEST
or: mv [-fin] SOURCE... DIRECTORY

Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY

	-f	Don't prompt before overwriting
	-i	Interactive, prompt before overwrite
	-n	Don't overwrite an existing file

=item B<nameif>

nameif [-s] [-c FILE] [IFNAME SELECTOR]...

Rename network interface while it in the down state.
The device matched by SELECTOR is renamed to IFACE.
SELECTOR can be a combination of:

	driver=STRING
	bus=STRING
	phy_address=NUM
	[mac=]XX:XX:XX:XX:XX:XX

	-c FILE	Configuration file (default: /etc/mactab)
	-s	Log to syslog

=item B<nanddump>

nanddump [-no] [--bb padbad|skipbad] [-s ADDR] [-l LEN] [-f FILE] MTD_DEVICE

Dump MTD_DEVICE

	-n	Read without ecc
	-o	Dump oob data
	-s ADDR	Start address
	-l LEN	Length
	-f FILE	Dump to file ('-' for stdout)
	--bb METHOD
		skipbad: skip bad blocks
		padbad: substitute bad blocks by 0xff (default)

=item B<nandwrite>

nandwrite [-np] [-s ADDR] MTD_DEVICE [FILE]

Write to MTD_DEVICE

	-n	Write without ecc
	-p	Pad to page size
	-s ADDR	Start address

=item B<nbd-client>

nbd-client { [-b BLKSIZE] [-N NAME] [-t SEC] [-p] HOST [PORT] | -d } BLOCKDEV

Connect to HOST and provide network block device on BLOCKDEV

=item B<nc>

nc [OPTIONS] HOST PORT  - connect
nc [OPTIONS] -l -p PORT [HOST] [PORT]  - listen

	-e PROG	Run PROG after connect (must be last)
	-l	Listen mode, for inbound connects
	-lk	With -e, provides persistent server
	-p PORT	Local port
	-s ADDR	Local address
	-w SEC	Timeout for connects and final net reads
	-i SEC	Delay interval for lines sent
	-n	Don't do DNS resolution
	-u	UDP mode
	-v	Verbose
	-o FILE	Hex dump traffic
	-z	Zero-I/O mode (scanning)

=item B<netstat>

netstat [-ral] [-tuwx] [-enWp]

Display networking information

	-r	Routing table
	-a	All sockets
	-l	Listening sockets
		Else: connected sockets
	-t	TCP sockets
	-u	UDP sockets
	-w	Raw sockets
	-x	Unix sockets
		Else: all socket types
	-e	Other/more information
	-n	Don't resolve names
	-W	Wide display
	-p	Show PID/program name for sockets

=item B<nice>

nice [-n ADJUST] [PROG ARGS]

Change scheduling priority, run PROG

	-n ADJUST	Adjust priority by ADJUST

=item B<nl>

nl [OPTIONS] [FILE]...

Write FILEs to standard output with line numbers added

	-b STYLE	Which lines to number - a: all, t: nonempty, n: none
	-i N		Line number increment
	-s STRING	Use STRING as line number separator
	-v N		Start from N
	-w N		Width of line numbers

=item B<nmeter>

nmeter [-d MSEC] FORMAT_STRING

Monitor system in real time

 -d MSEC	Milliseconds between updates, default:1000, none:-1

Format specifiers:

 %Nc or %[cN]	CPU. N - bar size (default 10)
		(displays: S:system U:user N:niced D:iowait I:irq i:softirq)
 %[nINTERFACE]	Network INTERFACE
 %m		Allocated memory
 %[mf]		Free memory
 %[mt]		Total memory
 %s		Allocated swap
 %f		Number of used file descriptors
 %Ni		Total/specific IRQ rate
 %x		Context switch rate
 %p		Forks
 %[pn]		# of processes
 %b		Block io
 %Nt		Time (with N decimal points)
 %r		Print <cr> instead of <lf> at EOL

=item B<nohup>

nohup PROG ARGS

Run PROG immune to hangups, with output to a non-tty

=item B<nologin>

nologin 

Politely refuse a login

=item B<nproc>

nproc --all --ignore=N

Print number of available CPUs

	--all		Number of installed CPUs
	--ignore=N	Exclude N CPUs

=item B<nsenter>

nsenter [OPTIONS] [PROG [ARGS]]

	-t PID		Target process to get namespaces from
	-m[FILE]	Enter mount namespace
	-u[FILE]	Enter UTS namespace (hostname etc)
	-i[FILE]	Enter System V IPC namespace
	-n[FILE]	Enter network namespace
	-p[FILE]	Enter pid namespace
	-U[FILE]	Enter user namespace
	-S UID		Set uid in entered namespace
	-G GID		Set gid in entered namespace
	--preserve-credentials	Don't touch uids or gids
	-r[DIR]		Set root directory
	-w[DIR]		Set working directory
	-F		Don't fork before exec'ing PROG

=item B<nslookup>

nslookup [-type=QUERY_TYPE] [-debug] HOST [DNS_SERVER]

Query DNS about HOST

QUERY_TYPE: soa,ns,a,aaaa,cname,mx,txt,ptr,any

=item B<ntpd>

ntpd [-dnqNwl] [-I IFACE] [-S PROG] [-k KEYFILE] [-p [keyno:N:]PEER]...

NTP client/server

	-d	Verbose (may be repeated)
	-n	Do not daemonize
	-q	Quit after clock is set
	-N	Run at high priority
	-w	Do not set time (only query peers), implies -n
	-S PROG	Run PROG after stepping time, stratum change, and every 11 min
	-k FILE	Key file (ntp.keys compatible)
	-p [keyno:NUM:]PEER
		Obtain time from PEER (may be repeated)
		Use key NUM for authentication
		If -p is not given, 'server HOST' lines
		from /etc/ntp.conf are used
	-l	Also run as server on port 123
	-I IFACE Bind server to IFACE, implies -l

=item B<nuke>

nuke DIR...

Remove DIRs

=item B<od>

od [-abcdfhilovxs] [-t TYPE] [-A RADIX] [-N SIZE] [-j SKIP] [-S MINSTR] [-w WIDTH] [FILE]...

Print FILEs (or stdin) unambiguously, as octal bytes by default

=item B<openvt>

openvt [-c N] [-sw] [PROG ARGS]

Start PROG on a new virtual terminal

	-c N	Use specified VT
	-s	Switch to the VT
	-w	Wait for PROG to exit

=item B<partprobe>

partprobe DEVICE...

Ask kernel to rescan partition table

=item B<passwd>

passwd [OPTIONS] [USER]

Change USER's password (default: current user)

	-a ALG	des,md5,sha256/512 (default des)
	-d	Set password to ''
	-l	Lock (disable) account
	-u	Unlock (enable) account

=item B<paste>

paste [OPTIONS] [FILE]...

Paste lines from each input file, separated with tab

	-d LIST	Use delimiters from LIST, not tab
	-s      Serial: one file at a time

=item B<patch>

patch [OPTIONS] [ORIGFILE [PATCHFILE]]

	-p N	Strip N leading components from file names
	-i DIFF	Read DIFF instead of stdin
	-R	Reverse patch
	-N	Ignore already applied patches
	-E	Remove output files if they become empty
	--dry-run	Don't actually change files

=item B<pgrep>

pgrep [-flanovx] [-s SID|-P PPID|PATTERN]

Display process(es) selected by regex PATTERN

	-l	Show command name too
	-a	Show command line too
	-f	Match against entire command line
	-n	Show the newest process only
	-o	Show the oldest process only
	-v	Negate the match
	-x	Match whole name (not substring)
	-s	Match session ID (0 for current)
	-P	Match parent process ID

=item B<pidof>

pidof [OPTIONS] [NAME]...

List PIDs of all processes with names that match NAMEs

	-s	Show only one PID
	-o PID	Omit given pid
		Use %PPID to omit pid of pidof's parent

=item B<ping>

ping [OPTIONS] HOST

Send ICMP ECHO_REQUEST packets to network hosts

	-4,-6		Force IP or IPv6 name resolution
	-c CNT		Send only CNT pings
	-s SIZE		Send SIZE data bytes in packets (default 56)
	-i SECS		Interval
	-A		Ping as soon as reply is recevied
	-t TTL		Set TTL
	-I IFACE/IP	Source interface or IP address
	-W SEC		Seconds to wait for the first response (default 10)
			(after all -c CNT packets are sent)
	-w SEC		Seconds until ping exits (default:infinite)
			(can exit earlier with -c CNT)
	-q		Quiet, only display output at start
			and when finished
	-p HEXBYTE	Pattern to use for payload

=item B<ping6>

ping6 [OPTIONS] HOST

Send ICMP ECHO_REQUEST packets to network hosts

	-c CNT		Send only CNT pings
	-s SIZE		Send SIZE data bytes in packets (default 56)
	-i SECS		Interval
	-A		Ping as soon as reply is recevied
	-I IFACE/IP	Source interface or IP address
	-q		Quiet, only display output at start
			and when finished
	-p HEXBYTE	Pattern to use for payload

=item B<pivot_root>

pivot_root NEW_ROOT PUT_OLD

Move the current root file system to PUT_OLD and make NEW_ROOT
the new root file system

=item B<pkill>

pkill [-l|-SIGNAL] [-fnovx] [-s SID|-P PPID|PATTERN]

Send a signal to process(es) selected by regex PATTERN

	-l	List all signals
	-f	Match against entire command line
	-n	Signal the newest process only
	-o	Signal the oldest process only
	-v	Negate the match
	-x	Match whole name (not substring)
	-s	Match session ID (0 for current)
	-P	Match parent process ID

=item B<pmap>

pmap [-xq] PID...

Display process memory usage

	-x	Show details
	-q	Quiet

=item B<popmaildir>

popmaildir [OPTIONS] MAILDIR [CONN_HELPER ARGS]

Fetch content of remote mailbox to local maildir

	-s		Skip authorization
	-T		Get messages with TOP instead of RETR
	-k		Keep retrieved messages on the server
	-t SEC		Network timeout
	-F 'PROG ARGS'	Filter program (may be repeated)
	-M 'PROG ARGS'	Delivery program

Fetch from plain POP3 server:
popmaildir -k DIR nc pop3.server.com 110 <user_and_pass.txt
Fetch from SSLed POP3 server and delete fetched emails:
popmaildir DIR -- openssl s_client -quiet -connect pop3.server.com:995 <user_and_pass.txt

=item B<poweroff>

poweroff [-d DELAY] [-n] [-f]

Halt and shut off power

	-d SEC	Delay interval
	-n	Do not sync
	-f	Force (don't go through init)

=item B<powertop>

powertop 

Analyze power consumption on Intel-based laptops

=item B<printenv>

printenv [VARIABLE]...

Print environment VARIABLEs.
If no VARIABLE specified, print all.

=item B<printf>

printf FORMAT [ARG]...

Format and print ARG(s) according to FORMAT (a-la C printf)

=item B<ps>

ps [-o COL1,COL2=HEADER] [-T]

Show list of processes

	-o COL1,COL2=HEADER	Select columns for display
	-T			Show threads

=item B<pscan>

pscan [-cb] [-p MIN_PORT] [-P MAX_PORT] [-t TIMEOUT] [-T MIN_RTT] HOST

Scan a host, print all open ports

	-c	Show closed ports too
	-b	Show blocked ports too
	-p	Scan from this port (default 1)
	-P	Scan up to this port (default 1024)
	-t	Timeout (default 5000 ms)
	-T	Minimum rtt (default 5 ms, increase for congested hosts)

=item B<pstree>

pstree [-p] [PID|USER]

Display process tree, optionally start from USER or PID

	-p	Show pids

=item B<pwd>

pwd 

Print the full filename of the current working directory

=item B<pwdx>

pwdx PID...

Show current directory for PIDs

=item B<raidautorun>

raidautorun DEVICE

Tell the kernel to automatically search and start RAID arrays

=item B<rdate>

rdate [-s/-p] HOST

Set and print time from HOST using RFC 868

	-s	Only set system time
	-p	Only print time

=item B<rdev>

rdev 

Print the device node associated with the filesystem mounted at '/'

=item B<readahead>

readahead [FILE]...

Preload FILEs to RAM

=item B<readlink>

readlink [-fnv] FILE

Display the value of a symlink

	-f	Canonicalize by following all symlinks
	-n	Don't add newline
	-v	Verbose

=item B<readprofile>

readprofile [OPTIONS]

	-m mapfile	(Default: /boot/System.map)
	-p profile	(Default: /proc/profile)
	-M NUM		Set the profiling multiplier to NUM
	-i		Print only info about the sampling step
	-v		Verbose
	-a		Print all symbols, even if count is 0
	-b		Print individual histogram-bin counts
	-s		Print individual counters within functions
	-r		Reset all the counters (root only)
	-n		Disable byte order auto-detection

=item B<realpath>

realpath FILE...

Return the absolute pathnames of given FILE

=item B<reboot>

reboot [-d DELAY] [-n] [-f]

Reboot the system

	-d SEC	Delay interval
	-n	Do not sync
	-f	Force (don't go through init)

=item B<reformime>

reformime [OPTIONS]

Parse MIME-encoded message on stdin

	-x PREFIX	Extract content of MIME sections to files
	-X PROG ARGS	Filter content of MIME sections through PROG
			Must be the last option

Other options are silently ignored

=item B<remove-shell>

remove-shell SHELL...

Remove SHELLs from /etc/shells

=item B<renice>

renice [-n] PRIORITY [[-p | -g | -u] ID...]...

Change scheduling priority of a running process

	-n	Add PRIORITY to current nice value
		Without -n, nice value is set to PRIORITY
	-p	Process ids (default)
	-g	Process group ids
	-u	Process user names

=item B<reset>

reset 

Reset the screen

=item B<resize>

resize 

Resize the screen

=item B<resume>

resume BLOCKDEV [OFFSET]

Restore system state from 'suspend-to-disk' data in BLOCKDEV

=item B<rev>

rev [FILE]...

Reverse lines of FILE

=item B<rm>

rm [-irf] FILE...

Remove (unlink) FILEs

	-i	Always prompt before removing
	-f	Never prompt
	-R,-r	Recurse

=item B<rmdir>

rmdir [OPTIONS] DIRECTORY...

Remove DIRECTORY if it is empty

	-p	Include parents
	--ignore-fail-on-non-empty

=item B<rmmod>

rmmod MODULE...

Unload kernel modules

=item B<route>

route [{add|del|delete}]

Edit kernel routing tables

	-n	Don't resolve names
	-e	Display other/more information
	-A inet{6}	Select address family

=item B<rpm>

rpm -i PACKAGE.rpm; rpm -qp[ildc] PACKAGE.rpm

Manipulate RPM packages

Commands:

	-i	Install package
	-qp	Query package
	-qpi	Show information
	-qpl	List contents
	-qpd	List documents
	-qpc	List config files

=item B<rpm2cpio>

rpm2cpio PACKAGE.rpm

Output a cpio archive of the rpm file

=item B<rtcwake>

rtcwake [-a | -l | -u] [-d DEV] [-m MODE] [-s SEC | -t TIME]

Enter a system sleep state until specified wakeup time

	-a,--auto	Read clock mode from adjtime
	-l,--local	Clock is set to local time
	-u,--utc	Clock is set to UTC time
	-d,--device DEV	Specify the RTC device
	-m,--mode MODE	Set sleep state (default: standby)
	-s,--seconds SEC Set timeout in SEC seconds from now
	-t,--time TIME	Set timeout to TIME seconds from epoch

=item B<run-init>

run-init [-d CAP,CAP...] [-n] [-c CONSOLE_DEV] NEW_ROOT NEW_INIT [ARGS]

Free initramfs and switch to another root fs:

chroot to NEW_ROOT, delete all in /, move NEW_ROOT to /,
execute NEW_INIT. PID must be 1. NEW_ROOT must be a mountpoint.

	-c DEV	Reopen stdio to DEV after switch
	-d CAPS	Drop capabilities
	-n	Dry run

=item B<run-parts>

run-parts [-a ARG]... [-u UMASK] [--reverse] [--test] [--exit-on-error] [--list] DIRECTORY

Run a bunch of scripts in DIRECTORY

	-a ARG		Pass ARG as argument to scripts
	-u UMASK	Set UMASK before running scripts
	--reverse	Reverse execution order
	--test		Dry run
	--exit-on-error	Exit if a script exits with non-zero
	--list		Print names of matching files even if they are not executable

=item B<runlevel>

runlevel [FILE]

Find the current and previous system runlevel

If no utmp FILE exists or if no runlevel record can be found,
print "unknown"

=item B<runsv>

runsv DIR

Start and monitor a service and optionally an appendant log service

=item B<runsvdir>

runsvdir [-P] [-s SCRIPT] DIR

Start a runsv process for each subdirectory. If it exits, restart it.

	-P		Put each runsv in a new session
	-s SCRIPT	Run SCRIPT <signo> after signal is processed

=item B<rx>

rx FILE

Receive a file using the xmodem protocol

=item B<script>

script [-afq] [-t[FILE]] [-c PROG] [OUTFILE]

Default OUTFILE is 'typescript'

	-a	Append output
	-c PROG	Run PROG, not shell
	-q	Quiet
	-t[FILE] Send timing to stderr or FILE

=item B<scriptreplay>

scriptreplay TIMINGFILE [TYPESCRIPT [DIVISOR]]

Play back typescripts, using timing information

=item B<sed>

sed [-i[SFX]] [-nrE] [-f FILE]... [-e CMD]... [FILE]...
or: sed [-i[SFX]] [-nrE] CMD [FILE]...

	-e CMD	Add CMD to sed commands to be executed
	-f FILE	Add FILE contents to sed commands to be executed
	-i[SFX]	Edit files in-place (otherwise sends to stdout)
		Optionally back files up, appending SFX
	-n	Suppress automatic printing of pattern space
	-r,-E	Use extended regex syntax

If no -e or -f, the first non-option argument is the sed command string.
Remaining arguments are input files (stdin if none).

=item B<sendmail>

sendmail [-tv] [-f SENDER] [-amLOGIN 4<user_pass.txt | -auUSER -apPASS]
		[-w SECS] [-H 'PROG ARGS' | -S HOST] [RECIPIENT_EMAIL]...

Read email from stdin and send it

Standard options:

	-t		Read additional recipients from message body
	-f SENDER	For use in MAIL FROM:<sender>. Can be empty string
			Default: -auUSER, or username of current UID
	-o OPTIONS	Various options. -oi implied, others are ignored
	-i		-oi synonym, implied and ignored

Busybox specific options:

	-v		Verbose
	-w SECS		Network timeout
	-H 'PROG ARGS'	Run connection helper. Examples:
		openssl s_client -quiet -tls1 -starttls smtp -connect smtp.gmail.com:25
		openssl s_client -quiet -tls1 -connect smtp.gmail.com:465
			$SMTP_ANTISPAM_DELAY: seconds to wait after helper connect
	-S HOST[:PORT]	Server (default $SMTPHOST or 127.0.0.1)
	-amLOGIN	Log in using AUTH LOGIN
	-amPLAIN	or AUTH PLAIN
			(-amCRAM-MD5 not supported)
	-auUSER		Username for AUTH
	-apPASS 	Password for AUTH

If no -a options are given, authentication is not done.
If -amLOGIN is given but no -au/-ap, user/password is read from fd #4.
Other options are silently ignored; -oi is implied.
Use makemime to create emails with attachments.

=item B<seq>

seq [-w] [-s SEP] [FIRST [INC]] LAST

Print numbers from FIRST to LAST, in steps of INC.
FIRST, INC default to 1.

	-w	Pad to last with leading zeros
	-s SEP	String separator

=item B<setarch>

setarch PERSONALITY [-R] PROG ARGS

PERSONALITY may be:

	linux32	Set 32bit uname emulation
	linux64	Set 64bit uname emulation

	-R	Disable address space randomization

=item B<setconsole>

setconsole [-r] [DEVICE]

Make writes to /dev/console appear on DEVICE (default: /dev/tty).
Does not redirect kernel log output or reads from /dev/console.

	-r	Reset: writes to /dev/console go to kernel log tty(s)

=item B<setfattr>

setfattr [-h] -n|-x ATTR [-v VALUE] FILE...

Set extended attributes

	-h		Do not follow symlinks
	-x ATTR		Remove attribute ATTR
	-n ATTR		Set attribute ATTR to VALUE
	-v VALUE	(default: empty)

=item B<setfont>

setfont FONT [-m MAPFILE] [-C TTY]

Load a console font

	-m MAPFILE	Load console screen map
	-C TTY		Affect TTY instead of /dev/tty

=item B<setkeycodes>

setkeycodes { SCANCODE KEYCODE }...

Modify kernel's scancode-to-keycode map,
allowing unusual keyboards to generate usable keycodes.

SCANCODE is either xx or e0xx (hexadecimal), KEYCODE is decimal.

=item B<setlogcons>

setlogcons [N]

Pin kernel output to VT console N. Default:0 (do not pin)

=item B<setpriv>

setpriv [OPTIONS] PROG [ARGS]

Run PROG with different privilege settings

-d,--dump		Show current capabilities
--nnp,--no-new-privs	Ignore setuid/setgid bits and file capabilities
--inh-caps CAP,CAP	Set inheritable capabilities
--ambient-caps CAP,CAP	Set ambient capabilities

=item B<setserial>

setserial [-abGvz] { DEVICE [PARAMETER [ARG]]... | -g DEVICE... }

Print or set serial port parameters

	-a	Print all
	-b	Print summary
	-G	Print as setserial PARAMETERs
	-v	Verbose
	-z	Zero out serial flags before setting
	-g	All args are device names

PARAMETERs: (* = takes ARG, ^ = can be turned off by preceding ^)
	*port, *irq, *divisor, *uart, *baud_base, *close_delay, *closing_wait,
	^fourport, ^auto_irq, ^skip_test, ^sak, ^session_lockout, ^pgrp_lockout,
	^callout_nohup, ^split_termios, ^hup_notify, ^low_latency, autoconfig,
	spd_normal, spd_hi, spd_vhi, spd_shi, spd_warp, spd_cust
ARG for uart:

	unknown, 8250, 16450, 16550, 16550A, Cirrus, 16650, 16650V2, 16750,
	16950, 16954, 16654, 16850, RSA, NS16550A, XSCALE, RM9000, OCTEON, AR7,
	U6_16550A

=item B<setsid>

setsid [-c] PROG ARGS

Run PROG in a new session. PROG will have no controlling terminal
and will not be affected by keyboard signals (^C etc).

	-c	Set controlling terminal to stdin

=item B<setuidgid>

setuidgid USER PROG ARGS

Set uid and gid to USER's uid and gid, drop supplementary group ids,
run PROG

=item B<sh>

sh [-/+OPTIONS] [-/+o OPT]... [-c 'SCRIPT' [ARG0 [ARGS]] / FILE [ARGS] / -s [ARGS]]

Unix shell interpreter

=item B<sha1sum>

sha1sum [-c[sw]] [FILE]...

Print or check SHA1 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<sha256sum>

sha256sum [-c[sw]] [FILE]...

Print or check SHA256 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<sha3sum>

sha3sum [-c[sw]] [-a BITS] [FILE]...

Print or check SHA3 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines
	-a BITS	224 (default), 256, 384, 512

=item B<sha512sum>

sha512sum [-c[sw]] [FILE]...

Print or check SHA512 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<showkey>

showkey [-a | -k | -s]

Show keys pressed

	-a	Display decimal/octal/hex values of the keys
	-k	Display interpreted keycodes (default)
	-s	Display raw scan-codes

=item B<shred>

shred FILE...

Overwrite/delete FILEs

	-f	Chmod to ensure writability
	-n N	Overwrite N times (default 3)
	-z	Final overwrite with zeros
	-u	Remove file

=item B<shuf>

shuf [-e|-i L-H] [-n NUM] [-o FILE] [-z] [FILE|ARG...]

Randomly permute lines

	-e	Treat ARGs as lines
	-i L-H	Treat numbers L-H as lines
	-n NUM	Output at most NUM lines
	-o FILE	Write to FILE, not standard output
	-z	End lines with zero byte, not newline

=item B<slattach>

slattach [-ehmLF] [-c SCRIPT] [-s BAUD] [-p PROTOCOL] SERIAL_DEVICE

Configure serial line as SLIP network interface

	-p PROT	Protocol: slip, cslip (default), slip6, clisp6, adaptive
	-s BAUD	Line speed
	-e	Exit after initialization
	-h	Exit if carrier is lost (else never exits)
	-c PROG	Run PROG on carrier loss
	-m	Do NOT set raw 8bit mode
	-L	Enable 3-wire operation
	-F	Disable RTS/CTS flow control

=item B<sleep>

sleep [N]...

Pause for a time equal to the total of the args given, where each arg can
have an optional suffix of (s)econds, (m)inutes, (h)ours, or (d)ays

=item B<smemcap>

smemcap >SMEMDATA.TAR

Collect memory usage data in /proc and write it to stdout

=item B<softlimit>

softlimit [-a BYTES] [-m BYTES] [-d BYTES] [-s BYTES] [-l BYTES]
	[-f BYTES] [-c BYTES] [-r BYTES] [-o N] [-p N] [-t N]
	PROG ARGS

Set soft resource limits, then run PROG

	-a BYTES	Limit total size of all segments
	-m BYTES	Same as -d BYTES -s BYTES -l BYTES -a BYTES
	-d BYTES	Limit data segment
	-s BYTES	Limit stack segment
	-l BYTES	Limit locked memory size
	-o N		Limit number of open files per process
	-p N		Limit number of processes per uid
Options controlling file sizes:

	-f BYTES	Limit output file sizes
	-c BYTES	Limit core file size
Efficiency opts:

	-r BYTES	Limit resident set size
	-t N		Limit CPU time, process receives
			a SIGXCPU after N seconds

=item B<sort>

sort [-nrugMcszbdfiokt] [-o FILE] [-k start[.offset][opts][,end[.offset][opts]] [-t CHAR] [FILE]...

Sort lines of text

	-o FILE	Output to FILE
	-c	Check whether input is sorted
	-b	Ignore leading blanks
	-f	Ignore case
	-i	Ignore unprintable characters
	-d	Dictionary order (blank or alphanumeric only)
	-n	Sort numbers
	-g	General numerical sort
	-M	Sort month
	-V	Sort version
	-t CHAR	Field separator
	-k N[,M] Sort by Nth field
	-r	Reverse sort order
	-s	Stable (don't sort ties alphabetically)
	-u	Suppress duplicate lines
	-z	Lines are terminated by NUL, not newline

=item B<split>

split [OPTIONS] [INPUT [PREFIX]]

	-b N[k|m]	Split by N (kilo|mega)bytes
	-l N		Split by N lines
	-a N		Use N letters as suffix

=item B<ssl_client>

ssl_client [-e] -s FD [-r FD] [-n SNI]

=item B<start-stop-daemon>

start-stop-daemon [OPTIONS] [-S|-K] ... [-- ARGS...]

Search for matching processes, and then
-K: stop all matching processes
-S: start a process unless a matching process is found

Process matching:

	-u USERNAME|UID	Match only this user's processes
	-n NAME		Match processes with NAME
			in comm field in /proc/PID/stat
	-x EXECUTABLE	Match processes with this command
			command in /proc/PID/cmdline
	-p FILE		Match a process with PID from FILE
	All specified conditions must match
-S only:
	-x EXECUTABLE	Program to run
	-a NAME		Zeroth argument
	-b		Background
	-N N		Change nice level
	-c USER[:[GRP]]	Change user/group
	-m		Write PID to pidfile specified by -p
-K only:
	-s SIG		Signal to send
	-t		Match only, exit with 0 if found
Other:

	-o		Exit with status 0 if nothing is done
	-v		Verbose
	-q		Quiet

=item B<stat>

stat [OPTIONS] FILE...

Display file (default) or filesystem status

	-c FMT	Use the specified format
	-f	Display filesystem status
	-L	Follow links
	-t	Terse display

FMT sequences for files:

 %a	Access rights in octal
 %A	Access rights in human readable form
 %b	Number of blocks allocated (see %B)
 %B	Size in bytes of each block reported by %b
 %d	Device number in decimal
 %D	Device number in hex
 %f	Raw mode in hex
 %F	File type
 %g	Group ID
 %G	Group name
 %h	Number of hard links
 %i	Inode number
 %n	File name
 %N	File name, with -> TARGET if symlink
 %o	I/O block size
 %s	Total size in bytes
 %t	Major device type in hex
 %T	Minor device type in hex
 %u	User ID
 %U	User name
 %x	Time of last access
 %X	Time of last access as seconds since Epoch
 %y	Time of last modification
 %Y	Time of last modification as seconds since Epoch
 %z	Time of last change
 %Z	Time of last change as seconds since Epoch

FMT sequences for file systems:

 %a	Free blocks available to non-superuser
 %b	Total data blocks
 %c	Total file nodes
 %d	Free file nodes
 %f	Free blocks
 %i	File System ID in hex
 %l	Maximum length of filenames
 %n	File name
 %s	Block size (for faster transfer)
 %S	Fundamental block size (for block counts)
 %t	Type in hex
 %T	Type in human readable form

=item B<strings>

strings [-fo] [-t o/d/x] [-n LEN] [FILE]...

Display printable strings in a binary file

	-f		Precede strings with filenames
	-o		Precede strings with octal offsets
	-t o/d/x	Precede strings with offsets in base 8/10/16
	-n LEN		At least LEN characters form a string (default 4)

=item B<stty>

stty [-a|g] [-F DEVICE] [SETTING]...

Without arguments, prints baud rate, line discipline,
and deviations from stty sane

	-F DEVICE	Open device instead of stdin
	-a		Print all current settings in human-readable form
	-g		Print in stty-readable form
	[SETTING]	See manpage

=item B<su>

su [-lmp] [-] [-s SH] [USER [SCRIPT ARGS / -c 'CMD' ARG0 ARGS]]

Run shell under USER (by default, root)

	-,-l	Clear environment, go to home dir, run shell as login shell
	-p,-m	Do not set new $HOME, $SHELL, $USER, $LOGNAME
	-c CMD	Command to pass to 'sh -c'
	-s SH	Shell to use instead of user's default

=item B<sulogin>

sulogin [-t N] [TTY]

Single user login

	-t N	Timeout

=item B<sum>

sum [-rs] [FILE]...

Checksum and count the blocks in a file

	-r	Use BSD sum algorithm (1K blocks)
	-s	Use System V sum algorithm (512byte blocks)

=item B<sv>

sv [-v] [-w SEC] CMD SERVICE_DIR...

Control services monitored by runsv supervisor.
Commands (only first character is enough):

status: query service status
up: if service isn't running, start it. If service stops, restart it
once: like 'up', but if service stops, don't restart it
down: send TERM and CONT signals. If ./run exits, start ./finish
	if it exists. After it stops, don't restart service
exit: send TERM and CONT signals to service and log service. If they exit,
	runsv exits too
pause, cont, hup, alarm, interrupt, quit, 1, 2, term, kill: send
STOP, CONT, HUP, ALRM, INT, QUIT, USR1, USR2, TERM, KILL signal to service

=item B<svc>

svc [-udopchaitkx] SERVICE_DIR...

Control services monitored by runsv supervisor

	-u	If service is not running, start it; restart if it stops
	-d	If service is running, send TERM+CONT signals; do not restart it
	-o	Once: if service is not running, start it; do not restart it
	-pchaitk Send STOP, CONT, HUP, ALRM, INT, TERM, KILL signal to service
	-x	Exit: runsv will exit as soon as the service is down

=item B<svlogd>

svlogd [-tttv] [-r C] [-R CHARS] [-l MATCHLEN] [-b BUFLEN] DIR...

Read log data from stdin and write to rotated log files in DIRs

-r C		Replace non-printable characters with C
-R CHARS	Also replace CHARS with C (default _)
-t		Timestamp with @tai64n
-tt		Timestamp with yyyy-mm-dd_hh:mm:ss.sssss
-ttt		Timestamp with yyyy-mm-ddThh:mm:ss.sssss
-v		Verbose

DIR/config file modifies behavior:
sSIZE - when to rotate logs (default 1000000, 0 disables)
nNUM - number of files to retain
!PROG - process rotated log with PROG
+,-PATTERN - (de)select line for logging
E,ePATTERN - (de)select line for stderr

=item B<svok>

svok SERVICE_DIR

Check whether runsv supervisor is running.
Exit code is 0 if it does, 100 if it does not,
111 (with error message) if SERVICE_DIR does not exist.

=item B<swapoff>

swapoff [-a] [DEVICE]

Stop swapping on DEVICE

	-a	Stop swapping on all swap devices

=item B<swapon>

swapon [-a] [-e] [-d[POL]] [-p PRI] [DEVICE]

Start swapping on DEVICE

	-a	Start swapping on all swap devices
	-d[POL]	Discard blocks at swapon (POL=once),
		as freed (POL=pages), or both (POL omitted)
	-e	Silently skip devices that do not exist
	-p PRI	Set swap device priority

=item B<switch_root>

switch_root [-c CONSOLE_DEV] NEW_ROOT NEW_INIT [ARGS]

Free initramfs and switch to another root fs:

chroot to NEW_ROOT, delete all in /, move NEW_ROOT to /,
execute NEW_INIT. PID must be 1. NEW_ROOT must be a mountpoint.

	-c DEV	Reopen stdio to DEV after switch

=item B<sync>

sync [-df] [FILE]...

Write all buffered blocks (in FILEs) to disk
	-d	Avoid syncing metadata
	-f	Sync filesystems underlying FILEs

=item B<sysctl>

sysctl -p [-enq] [FILE...] / [-enqaw] [KEY[=VALUE]]...

Show/set kernel parameters

	-p	Set values from FILEs (default /etc/sysctl.conf)
	-e	Don't warn about unknown keys
	-n	Don't show key names
	-q      Quiet
	-a	Show all values
	-w	Set values

=item B<syslogd>

syslogd [OPTIONS]

System logging utility

	-n		Run in foreground
	-R HOST[:PORT]	Log to HOST:PORT (default PORT:514)
	-L		Log locally and via network (default is network only if -R)
	-C[size_kb]	Log to shared mem buffer (use logread to read it)
	-K		Log to kernel printk buffer (use dmesg to read it)
	-O FILE		Log to FILE (default: /var/log/messages, stdout if -)
	-s SIZE		Max size (KB) before rotation (default 200KB, 0=off)
	-b N		N rotated logs to keep (default 1, max 99, 0=purge)
	-l N		Log only messages more urgent than prio N (1-8)
	-S		Smaller output
	-t		Strip client-generated timestamps
	-D		Drop duplicates
	-f FILE		Use FILE as config (default:/etc/syslog.conf)

=item B<tac>

tac [FILE]...

Concatenate FILEs and print them in reverse

=item B<tail>

tail [OPTIONS] [FILE]...

Print last 10 lines of each FILE (or stdin) to stdout.
With more than one FILE, precede each with a filename header.

	-f		Print data as file grows
	-c [+]N[kbm]	Print last N bytes
	-n N[kbm]	Print last N lines
	-n +N[kbm]	Start on Nth line and print the rest
	-q		Never print headers
	-s SECONDS	Wait SECONDS between reads with -f
	-v		Always print headers
	-F		Same as -f, but keep retrying

N may be suffixed by k (x1024), b (x512), or m (x1024^2).

=item B<tar>

tar c|x|t [-zJjahmvokO] [-f TARFILE] [-C DIR] [-T FILE] [-X FILE] [--exclude PATTERN]... [FILE]...

Create, extract, or list files from a tar file

	c	Create
	x	Extract
	t	List
	-f FILE	Name of TARFILE ('-' for stdin/out)
	-C DIR	Change to DIR before operation
	-v	Verbose
	-O	Extract to stdout
	-m	Don't restore mtime
	-o	Don't restore user:group
	-k	Don't replace existing files
	-z	(De)compress using gzip
	-J	(De)compress using xz
	-j	(De)compress using bzip2
	-a	(De)compress using lzma
	-h	Follow symlinks
	-T FILE	File with names to include
	-X FILE	File with glob patterns to exclude
	--exclude PATTERN	Glob pattern to exclude

=item B<taskset>

taskset [-p] [HEXMASK] PID | PROG ARGS

Set or get CPU affinity

	-p	Operate on an existing PID

=item B<tc>

tc OBJECT CMD [dev STRING]

OBJECT: qdisc|class|filter
CMD: add|del|change|replace|show

qdisc [handle QHANDLE] [root|ingress|parent CLASSID]
	[[QDISC_KIND] [help|OPTIONS]]
	QDISC_KIND := [p|b]fifo|tbf|prio|cbq|red|etc.
qdisc show [dev STRING] [ingress]
class [classid CLASSID] [root|parent CLASSID]
	[[QDISC_KIND] [help|OPTIONS] ]
class show [ dev STRING ] [root|parent CLASSID]
filter [pref PRIO] [protocol PROTO]
	[root|classid CLASSID] [handle FILTERID]
	[[FILTER_TYPE] [help|OPTIONS]]
filter show [dev STRING] [root|parent CLASSID]

=item B<tcpsvd>

tcpsvd [-hEv] [-c N] [-C N[:MSG]] [-b N] [-u USER] [-l NAME] IP PORT PROG

Create TCP socket, bind to IP:PORT and listen for incoming connections.
Run PROG for each connection.

	IP PORT		IP:PORT to listen on
	PROG ARGS	Program to run
	-u USER[:GRP]	Change to user/group after bind
	-c N		Up to N connections simultaneously (default 30)
	-b N		Allow backlog of approximately N TCP SYNs (default 20)
	-C N[:MSG]	Allow only up to N connections from the same IP:
			new connections from this IP address are closed
			immediately, MSG is written to the peer before close
	-E		Don't set up environment
	-h		Look up peer's hostname
	-l NAME		Local hostname (else look up local hostname in DNS)
	-v		Verbose

Environment if no -E:
PROTO='TCP'
TCPREMOTEADDR='ip:port' ('[ip]:port' for IPv6)
TCPLOCALADDR='ip:port'
TCPORIGDSTADDR='ip:port' of destination before firewall
	Useful for REDIRECTed-to-local connections:
	iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to 8080
TCPCONCURRENCY=num_of_connects_from_this_ip
If -h:
TCPLOCALHOST='hostname' (-l NAME is used if specified)
TCPREMOTEHOST='hostname'

=item B<tee>

tee [-ai] [FILE]...

Copy stdin to each FILE, and also to stdout

	-a	Append to the given FILEs, don't overwrite
	-i	Ignore interrupt signals (SIGINT)

=item B<telnet>

telnet [-a] [-l USER] HOST [PORT]

Connect to telnet server

	-a	Automatic login with $USER variable
	-l USER	Automatic login as USER

=item B<telnetd>

telnetd [OPTIONS]

Handle incoming telnet connections

	-l LOGIN	Exec LOGIN on connect
	-f ISSUE_FILE	Display ISSUE_FILE instead of /etc/issue
	-K		Close connection as soon as login exits
			(normally wait until all programs close slave pty)
	-p PORT		Port to listen on
	-b ADDR[:PORT]	Address to bind to
	-F		Run in foreground
	-i		Inetd mode
	-w SEC		Inetd 'wait' mode, linger time SEC
	-S		Log to syslog (implied by -i or without -F and -w)

=item B<tftp>

tftp [OPTIONS] HOST [PORT]

Transfer a file from/to tftp server

	-l FILE	Local FILE
	-r FILE	Remote FILE
	-g	Get file
	-p	Put file
	-b SIZE	Transfer blocks of SIZE octets

=item B<tftpd>

tftpd [-cr] [-u USER] [DIR]

Transfer a file on tftp client's request

tftpd should be used as an inetd service.
tftpd's line for inetd.conf:
	69 dgram udp nowait root tftpd tftpd -l /files/to/serve
It also can be ran from udpsvd:

	udpsvd -vE 0.0.0.0 69 tftpd /files/to/serve

	-r	Prohibit upload
	-c	Allow file creation via upload
	-u	Access files as USER
	-l	Log to syslog (inetd mode requires this)

=item B<time>

time [-vpa] [-o FILE] PROG ARGS

Run PROG, display resource usage when it exits

	-v	Verbose
	-p	POSIX output format
	-f FMT	Custom format
	-o FILE	Write result to FILE
	-a	Append (else overwrite)

=item B<timeout>

timeout [-s SIG] SECS PROG ARGS

Runs PROG. Sends SIG to it if it is not gone in SECS seconds.
Default SIG: TERM.

=item B<top>

top [-b] [-nCOUNT] [-dSECONDS] [-m]

Provide a view of process activity in real time.
Read the status of all processes from /proc each SECONDS
and display a screenful of them.
Keys:

	N/M/P/T: show CPU usage, sort by pid/mem/cpu/time
	S: show memory
	R: reverse sort
	H: toggle threads, 1: toggle SMP
	Q,^C: exit

Options:

	-b	Batch mode
	-n N	Exit after N iterations
	-d N	Delay between updates
	-m	Same as 's' key

=item B<touch>

touch [-c] [-d DATE] [-t DATE] [-r FILE] FILE...

Update the last-modified date on the given FILE[s]

	-c	Don't create files
	-h	Don't follow links
	-d DT	Date/time to use
	-t DT	Date/time to use
	-r FILE	Use FILE's date/time

=item B<tr>

tr [-cds] STRING1 [STRING2]

Translate, squeeze, or delete characters from stdin, writing to stdout

	-c	Take complement of STRING1
	-d	Delete input characters coded STRING1
	-s	Squeeze multiple output characters of STRING2 into one character

=item B<traceroute>

traceroute [-46FIlnrv] [-f 1ST_TTL] [-m MAXTTL] [-q PROBES] [-p PORT]
	[-t TOS] [-w WAIT_SEC] [-s SRC_IP] [-i IFACE]
	[-z PAUSE_MSEC] HOST [BYTES]

Trace the route to HOST

	-4,-6	Force IP or IPv6 name resolution
	-F	Set don't fragment bit
	-I	Use ICMP ECHO instead of UDP datagrams
	-l	Display TTL value of the returned packet
	-n	Print numeric addresses
	-r	Bypass routing tables, send directly to HOST
	-v	Verbose
	-f N	First number of hops (default 1)
	-m N	Max number of hops
	-q N	Number of probes per hop (default 3)
	-p N	Base UDP port number used in probes
		(default 33434)
	-s IP	Source address
	-i IFACE Source interface
	-t N	Type-of-service in probe packets (default 0)
	-w SEC	Time to wait for a response (default 3)
	-g IP	Loose source route gateway (8 max)

=item B<traceroute6>

traceroute6 [-nrv] [-m MAXTTL] [-q PROBES] [-p PORT]
	[-t TOS] [-w WAIT_SEC] [-s SRC_IP] [-i IFACE]
	HOST [BYTES]

Trace the route to HOST

	-n	Print numeric addresses
	-r	Bypass routing tables, send directly to HOST
	-v	Verbose
	-m N	Max number of hops
	-q N	Number of probes per hop (default 3)
	-p N	Base UDP port number used in probes
		(default 33434)
	-s IP	Source address
	-i IFACE Source interface
	-t N	Type-of-service in probe packets (default 0)
	-w SEC	Time wait for a response (default 3)

=item B<truncate>

truncate [-c] -s SIZE FILE...

Truncate FILEs to the given size

	-c	Do not create files
	-s SIZE	Truncate to SIZE

=item B<tty>

tty 

Print file name of stdin's terminal

	-s	Print nothing, only return exit status

=item B<ttysize>

ttysize [w] [h]

Print dimensions of stdin tty, or 80x24

=item B<tunctl>

tunctl [-f device] ([-t name] | -d name) [-u owner] [-g group] [-b]

Create or delete tun interfaces

	-f name		tun device (/dev/net/tun)
	-t name		Create iface 'name'
	-d name		Delete iface 'name'
	-u owner	Set iface owner
	-g group	Set iface group
	-b		Brief output

=item B<ubiattach>

ubiattach -m MTD_NUM [-d UBI_NUM] [-O VID_HDR_OFF] UBI_CTRL_DEV

Attach MTD device to UBI

	-m MTD_NUM	MTD device number to attach
	-d UBI_NUM	UBI device number to assign
	-O VID_HDR_OFF	VID header offset

=item B<ubidetach>

ubidetach -d UBI_NUM UBI_CTRL_DEV

Detach MTD device from UBI

	-d UBI_NUM	UBI device number

=item B<ubimkvol>

ubimkvol -N NAME [-s SIZE | -m] UBI_DEVICE

Create UBI volume

	-a ALIGNMENT	Volume alignment (default 1)
	-m		Set volume size to maximum available
	-n VOLID	Volume ID. If not specified,
			assigned automatically
	-N NAME		Volume name
	-s SIZE		Size in bytes
	-t TYPE		Volume type (static|dynamic)

=item B<ubirename>

ubirename UBI_DEVICE OLD_VOLNAME NEW_VOLNAME [OLD2 NEW2]...

Rename UBI volumes on UBI_DEVICE

=item B<ubirmvol>

ubirmvol -n VOLID / -N VOLNAME UBI_DEVICE

Remove UBI volume

	-n VOLID	Volume ID
	-N VOLNAME	Volume name

=item B<ubirsvol>

ubirsvol -n VOLID -s SIZE UBI_DEVICE

Resize UBI volume

	-n VOLID	Volume ID
	-s SIZE		Size in bytes

=item B<ubiupdatevol>

ubiupdatevol -t UBI_DEVICE | [-s SIZE] UBI_DEVICE IMG_FILE

Update UBI volume

	-t	Truncate to zero size
	-s SIZE	Size in bytes to resize to

=item B<udhcpc>

udhcpc [-fbqvRB] [-a[MSEC]] [-t N] [-T SEC] [-A SEC/-n]
	[-i IFACE] [-s PROG] [-p PIDFILE]
	[-oC] [-r IP] [-V VENDOR] [-F NAME] [-x OPT:VAL]... [-O OPT]...

	-i IFACE	Interface to use (default eth0)
	-s PROG		Run PROG at DHCP events (default /usr/share/udhcpc/default.script)
	-p FILE		Create pidfile
	-B		Request broadcast replies
	-t N		Send up to N discover packets (default 3)
	-T SEC		Pause between packets (default 3)
	-A SEC		Wait if lease is not obtained (default 20)
	-n		Exit if lease is not obtained
	-q		Exit after obtaining lease
	-R		Release IP on exit
	-f		Run in foreground
	-b		Background if lease is not obtained
	-S		Log to syslog too
	-a[MSEC]	Validate offered address with ARP ping
	-r IP		Request this IP address
	-o		Don't request any options (unless -O is given)
	-O OPT		Request option OPT from server (cumulative)
	-x OPT:VAL	Include option OPT in sent packets (cumulative)
			Examples of string, numeric, and hex byte opts:
			-x hostname:bbox - option 12
			-x lease:3600 - option 51 (lease time)
			-x 0x3d:0100BEEFC0FFEE - option 61 (client id)
			-x 14:'"dumpfile"' - option 14 (shell-quoted)
	-F NAME		Ask server to update DNS mapping for NAME
	-V VENDOR	Vendor identifier (default 'udhcp VERSION')
	-C		Don't send MAC as client identifier
	-v		Verbose
Signals:

	USR1	Renew lease
	USR2	Release lease

=item B<udhcpd>

udhcpd [-fS] [-I ADDR] [CONFFILE]

DHCP server

	-f	Run in foreground
	-S	Log to syslog too
	-I ADDR	Local address
	-a MSEC	Timeout for ARP ping (default 2000)

=item B<udpsvd>

udpsvd [-hEv] [-c N] [-u USER] [-l NAME] IP PORT PROG

Create UDP socket, bind to IP:PORT and wait for incoming packets.
Run PROG for each packet, redirecting all further packets with same
peer ip:port to it.

	IP PORT		IP:PORT to listen on
	PROG ARGS	Program to run
	-u USER[:GRP]	Change to user/group after bind
	-c N		Up to N connections simultaneously (default 30)
	-E		Don't set up environment
	-h		Look up peer's hostname
	-l NAME		Local hostname (else look up local hostname in DNS)
	-v		Verbose

Environment if no -E:
PROTO='UDP'
UDPREMOTEADDR='ip:port' ('[ip]:port' for IPv6)
UDPLOCALADDR='ip:port'
If -h:
UDPLOCALHOST='hostname' (-l NAME is used if specified)
UDPREMOTEHOST='hostname'

=item B<uevent>

uevent [PROG [ARGS]]

uevent runs PROG for every netlink notification.
PROG's environment contains data passed from the kernel.
Typical usage (daemon for dynamic device node creation):
	# uevent mdev & mdev -s

=item B<umount>

umount [OPTIONS] FILESYSTEM|DIRECTORY

Unmount file systems

	-a	Unmount all file systems
	-r	Try to remount devices as read-only if mount is busy
	-l	Lazy umount (detach filesystem)
	-f	Force umount (i.e., unreachable NFS server)
	-d	Free loop device if it has been used
	-t FSTYPE[,...]	Unmount only these filesystem type(s)

=item B<uname>

uname [-amnrspvio]

Print system information

	-a	Print all
	-m	The machine (hardware) type
	-n	Hostname
	-r	Kernel release
	-s	Kernel name (default)
	-p	Processor type
	-v	Kernel version
	-i	The hardware platform
	-o	OS name

=item B<unexpand>

unexpand [-fa][-t N] [FILE]...

Convert spaces to tabs, writing to stdout

	-a	Convert all blanks
	-f	Convert only leading blanks
	-t N	Tabstops every N chars

=item B<uniq>

uniq [-cdu][-f,s,w N] [INPUT [OUTPUT]]

Discard duplicate lines

	-c	Prefix lines by the number of occurrences
	-d	Only print duplicate lines
	-u	Only print unique lines
	-i	Ignore case
	-f N	Skip first N fields
	-s N	Skip first N chars (after any skipped fields)
	-w N	Compare N characters in line

=item B<unix2dos>

unix2dos [-ud] [FILE]

Convert FILE in-place from Unix to DOS format.
When no file is given, use stdin/stdout.

	-u	dos2unix
	-d	unix2dos

=item B<unlink>

unlink FILE

Delete FILE by calling unlink()

=item B<unlzma>

unlzma [-cfk] [FILE]...

Decompress FILE (or stdin)

	-c	Write to stdout
	-f	Force
	-k	Keep input files

=item B<unshare>

unshare [OPTIONS] [PROG [ARGS]]

	-m,--mount[=FILE]	Unshare mount namespace
	-u,--uts[=FILE]		Unshare UTS namespace (hostname etc.)
	-i,--ipc[=FILE]		Unshare System V IPC namespace
	-n,--net[=FILE]		Unshare network namespace
	-p,--pid[=FILE]		Unshare PID namespace
	-U,--user[=FILE]	Unshare user namespace
	-f,--fork		Fork before execing PROG
	-r,--map-root-user	Map current user to root (implies -U)
	--mount-proc[=DIR]	Mount /proc filesystem first (implies -m)
	--propagation slave|shared|private|unchanged
				Modify mount propagation in mount namespace
	--setgroups allow|deny	Control the setgroups syscall in user namespaces

=item B<unxz>

unxz [-cfk] [FILE]...

Decompress FILE (or stdin)

	-c	Write to stdout
	-f	Force
	-k	Keep input files

=item B<unzip>

unzip [-lnojpq] FILE[.zip] [FILE]... [-x FILE...] [-d DIR]

Extract FILEs from ZIP archive

	-l	List contents (with -q for short form)
	-n	Never overwrite files (default: ask)
	-o	Overwrite
	-j	Do not restore paths
	-p	Print to stdout
	-q	Quiet
	-x FILE	Exclude FILEs
	-d DIR	Extract into DIR

=item B<uptime>

uptime 

Display the time since the last boot

=item B<users>

users 

Print the users currently logged on

=item B<usleep>

usleep N

Pause for N microseconds

=item B<uudecode>

uudecode [-o OUTFILE] [INFILE]

Uudecode a file
Finds OUTFILE in uuencoded source unless -o is given

=item B<uuencode>

uuencode [-m] [FILE] STORED_FILENAME

Uuencode FILE (or stdin) to stdout

	-m	Use base64 encoding per RFC1521

=item B<vconfig>

vconfig COMMAND [OPTIONS]

Create and remove virtual ethernet devices

	add		IFACE VLAN_ID
	rem		VLAN_NAME
	set_flag	IFACE 0|1 VLAN_QOS
	set_egress_map	VLAN_NAME SKB_PRIO VLAN_QOS
	set_ingress_map	VLAN_NAME SKB_PRIO VLAN_QOS
	set_name_type	NAME_TYPE

=item B<vi>

vi [OPTIONS] [FILE]...

Edit FILE

	-c CMD	Initial command to run ($EXINIT also available)
	-R	Read-only
	-H	List available features

=item B<vlock>

vlock [-a]

Lock a virtual terminal. A password is required to unlock.

	-a	Lock all VTs

=item B<volname>

volname [DEVICE]

Show CD volume name of the DEVICE (default /dev/cdrom)

=item B<w>

w 

Show who is logged on

=item B<wall>

wall [FILE]

Write content of FILE or stdin to all logged-in users

=item B<watch>

watch [-n SEC] [-t] PROG ARGS

Run PROG periodically

	-n	Loop period in seconds (default 2)
	-t	Don't print header

=item B<watchdog>

watchdog [-t N[ms]] [-T N[ms]] [-F] DEV

Periodically write to watchdog device DEV

	-T N	Reboot after N seconds if not reset (default 60)
	-t N	Reset every N seconds (default 30)
	-F	Run in foreground

Use 500ms to specify period in milliseconds

=item B<wc>

wc [-cmlwL] [FILE]...

Count lines, words, and bytes for each FILE (or stdin)

	-c	Count bytes
	-m	Count characters
	-l	Count newlines
	-w	Count words
	-L	Print longest line length

=item B<wget>

wget [-c|--continue] [--spider] [-q|--quiet] [-O|--output-document FILE]
	[--header 'header: value'] [-Y|--proxy on/off] [-P DIR]
	[-S|--server-response] [-U|--user-agent AGENT] [-T SEC] URL...

Retrieve files via HTTP or FTP

	--spider	Only check URL existence: $? is 0 if exists
	-c		Continue retrieval of aborted transfer
	-q		Quiet
	-P DIR		Save to DIR (default .)
	-S    		Show server response
	-T SEC		Network read timeout is SEC seconds
	-O FILE		Save to FILE ('-' for stdout)
	-U STR		Use STR for User-Agent header
	-Y on/off	Use proxy

=item B<which>

which [COMMAND]...

Locate a COMMAND

=item B<who>

who [-a]

Show who is logged on

	-a	Show all
	-H	Print column headers

=item B<whoami>

whoami 

Print the user name associated with the current effective user id

=item B<whois>

whois [-i] [-h SERVER] [-p PORT] NAME...

Query WHOIS info about NAME

	-i	Show redirect results too
	-h,-p	Server to query

=item B<xargs>

xargs [OPTIONS] [PROG ARGS]

Run PROG on every item given by stdin

	-p	Ask user whether to run each command
	-r	Don't run command if input is empty
	-0	Input is separated by NULs
	-a FILE	Read from FILE instead of stdin
	-t	Print the command on stderr before execution
	-e[STR]	STR stops input processing
	-n N	Pass no more than N args to PROG
	-s N	Pass command line of no more than N bytes
	-I STR	Replace STR within PROG ARGS with input line
	-P N	Run up to N PROGs in parallel
	-x	Exit if size is exceeded

=item B<xxd>

xxd [OPTIONS] [FILE]

Hex dump FILE (or stdin)

	-g N		Bytes per group
	-c N		Bytes per line
	-p		Show only hex bytes, assumes -c30
	-l LENGTH	Show only first LENGTH bytes
	-s OFFSET	Skip OFFSET bytes

=item B<xz>

xz -d [-cfk] [FILE]...

Decompress FILE (or stdin)

	-d	Decompress
	-c	Write to stdout
	-f	Force
	-k	Keep input files

=item B<xzcat>

xzcat [FILE]...

Decompress to stdout

=item B<yes>

yes [STRING]

Repeatedly output a line with STRING, or 'y'

=item B<zcat>

zcat [FILE]...

Decompress to stdout

=item B<zcip>

zcip [OPTIONS] IFACE SCRIPT

Manage a ZeroConf IPv4 link-local address

	-f		Run in foreground
	-q		Quit after obtaining address
	-r 169.254.x.x	Request this address first
	-l x.x.0.0	Use this range instead of 169.254
	-v		Verbose

$LOGGING=none		Suppress logging
$LOGGING=syslog 	Log to syslog

With no -q, runs continuously monitoring for ARP conflicts,
exits only on I/O errors (link down etc)

=back

=head1 LIBC NSS

GNU Libc (glibc) uses the Name Service Switch (NSS) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of NSS.  Some applets however, such as login and su, will use libc functions
that require NSS.

If you enable CONFIG_USE_BB_PWD_GRP, BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using NSS.  This may allow you to run your system without the need for
installing any of the NSS configuration files and libraries.

When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc NSS stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).

Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any NSS support files or libraries.

=head1 MAINTAINER

Denis Vlasenko <vda.linux@googlemail.com>

=head1 AUTHORS

The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.


=for html <br>

Emanuele Aina <emanuele.aina@tiscali.it>
    run-parts

=for html <br>

Erik Andersen <andersen@codepoet.org>

    Tons of new stuff, major rewrite of most of the
    core apps, tons of new apps as noted in header files.
    Lots of tedious effort writing these boring docs that
    nobody is going to actually read.

=for html <br>

Laurence Anderson <l.d.anderson@warwick.ac.uk>

    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm

=for html <br>

Jeff Angielski <jeff@theptrgroup.com>

    ftpput, ftpget

=for html <br>

Edward Betts <edward@debian.org>

    expr, hostid, logname, whoami

=for html <br>

John Beppu <beppu@codepoet.org>

    du, nslookup, sort

=for html <br>

Brian Candler <B.Candler@pobox.com>

    tiny-ls(ls)

=for html <br>

Randolph Chung <tausq@debian.org>

    fbset, ping, hostname

=for html <br>

Dave Cinege <dcinege@psychosis.com>

    more(v2), makedevs, dutmp, modularization, auto links file,
    various fixes, Linux Router Project maintenance

=for html <br>

Jordan Crouse <jordan@cosmicpenguin.net>

    ipcalc

=for html <br>

Magnus Damm <damm@opensource.se>

    tftp client insmod powerpc support

=for html <br>

Larry Doolittle <ldoolitt@recycle.lbl.gov>

    pristine source directory compilation, lots of patches and fixes.

=for html <br>

Glenn Engel <glenne@engel.org>

    httpd

=for html <br>

Gennady Feldman <gfeldman@gena01.com>

    Sysklogd (single threaded syslogd, IPC Circular buffer support,
    logread), various fixes.

=for html <br>

Karl M. Hegbloom <karlheg@debian.org>

    cp_mv.c, the test suite, various fixes to utility.c, &c.

=for html <br>

Daniel Jacobowitz <dan@debian.org>

    mktemp.c

=for html <br>

Matt Kraai <kraai@alumni.cmu.edu>

    documentation, bugfixes, test suite

=for html <br>

Stephan Linz <linz@li-pro.net>

    ipcalc, Red Hat equivalence

=for html <br>

John Lombardo <john@deltanet.com>

    tr

=for html <br>

Glenn McGrath <bug1@iinet.net.au>

    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
    nameif, sed, patch, fold, install, uudecode.
    Various bugfixes, review and apply numerous patches.

=for html <br>

Manuel Novoa III <mjn3@codepoet.org>

    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
    get_last_path_component, simplify_path, and a number trivial libbb routines

    also bug fixes, partial rewrites, and size optimizations in
    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
    interface, dutmp, ifconfig, route

=for html <br>

Vladimir Oleynik <dzo@simtreas.ru>

    cmdedit; xargs(current), httpd(current);
    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
    locale, various fixes
    and irreconcilable critic of everything not perfect.

=for html <br>

Bruce Perens <bruce@pixar.com>

    Original author of BusyBox in 1995, 1996. Some of his code can
    still be found hiding here and there...

=for html <br>

Tim Riker <Tim@Rikers.org>

    bug fixes, member of fan club

=for html <br>

Kent Robotti <robotti@metconnect.com>

    reset, tons and tons of bug reports and patches.

=for html <br>

Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>

    wget - Contributed by permission of Covad Communications

=for html <br>

Pavel Roskin <proski@gnu.org>

    Lots of bugs fixes and patches.

=for html <br>

Gyepi Sam <gyepi@praxis-sw.com>

    Remote logging feature for syslogd

=for html <br>

Linus Torvalds <torvalds@transmeta.com>

    mkswap, fsck.minix, mkfs.minix

=for html <br>

Mark Whitley <markw@codepoet.org>

    grep, sed, cut, xargs(previous),
    style-guide, new-applet-HOWTO, bug fixes, etc.

=for html <br>

Charles P. Wright <cpwright@villagenet.com>

    gzip, mini-netcat(nc)

=for html <br>

Enrique Zanardi <ezanardi@ull.es>

    tarcat (since removed), loadkmap, various fixes, Debian maintenance

=for html <br>

Tito Ragusa <farmatito@tiscali.it>

    devfsd and size optimizations in strings, openvt and deallocvt.

=for html <br>

Paul Fox <pgf@foxharp.boston.ma.us>

    vi editing mode for ash, various other patches/fixes

=for html <br>

Roberto A. Foglietta <me@roberto.foglietta.name>

    port: dnsd

=for html <br>

Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>

    misc

=for html <br>

Mike Frysinger <vapier@gentoo.org>

    initial e2fsprogs, printenv, setarch, sum, misc

=for html <br>

Jie Zhang <jie.zhang@analog.com>

    fixed two bugs in msh and hush (exitcode of killed processes)

=cut
